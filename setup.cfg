[metadata]
name = galois
version = file: galois/version.txt
author = Matt Hostetter
author_email = matthostetter@gmail.com
url = https://github.com/mhostetter/galois
description = A performant NumPy extension for Galois fields and their applications
long_description = file: README.md
long_description_content_type = text/markdown
license = MIT
license_file = LICENSE
keywords =
    galois, galois field, finite field, math, abstract algebra, number theory,
    numpy, numba, gpu, performant,
    encryption, cryptography, elliptic curves, elliptic curve cryptography, ecc, aes, rsa,
    GF(2), GF2, GF(2^8), GF(256), GF256
classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: Developers
    Intended Audience :: Education
    Intended Audience :: Science/Research
    Intended Audience :: Telecommunications Industry
    License :: OSI Approved :: MIT License
    Operating System :: MacOS :: MacOS X
    Operating System :: Microsoft :: Windows
    Operating System :: POSIX :: Linux
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Topic :: Scientific/Engineering :: Mathematics
    Topic :: Security :: Cryptography
    Topic :: Software Development :: Libraries :: Python Modules
project_urls =
    Source = https://github.com/mhostetter/galois
    Issues = https://github.com/mhostetter/galois/issues
    Documentation = https://galois.readthedocs.io/en/stable/
    Discuss = https://github.com/mhostetter/galois/discussions
    Changelog = https://galois.readthedocs.io/en/stable/release-notes.html
    Twitter = https://twitter.com/galois_py

[options]
packages = galois, galois._codes, galois._databases, galois._fields, galois._polys
include_package_data = true
test_suite = tests
python_requires = >=3.6
install_requires =
    numpy >= 1.17.3, < 1.21  # v1.13 needed for __array_ufunc__ in np.ndarray, v1.17.3 is needed for wheels for Python 3.8, v1.21 has breaking changes to ufuncs
    numba >= 0.53, < 0.54  # v0.53 needed for function signautres of CPUDispatchers

[options.package_data]
galois = *.txt
galois._databases = *.db

[bdist_wheel]
universal = 0

[pylint]
disable =
    missing-module-docstring,
    missing-function-docstring,
    line-too-long,
    too-many-lines,
    bad-whitespace,
    invalid-name,
    no-else-return,
    fixme,
    too-many-arguments,
    too-many-locals,
    too-many-instance-attributes,
    too-many-ancestors,
    consider-using-enumerate,
    unneeded-not,
    global-statement,
    invalid-unary-operand-type,
    not-callable,  # pylint doesn't understand metaclass properties
    unsubscriptable-object,  # pylint doesn't understand metaclass properties
    comparison-with-callable,  # pylint doesn't understand metaclass properties
    eval-used,
    too-many-branches,
    protected-access
min-similarity-lines = 100

[tool:pytest]
markers =
    GF2: Tests run over the GF(2) field
    GFp: Tests run over all the GF(p) fields
    GF5: Tests run over the GF(5) field
    GF7: Tests run over the GF(7) field
    GF31: Tests run over the GF(31) field
    GF3191: Tests run over the GF(3191) field
    GF2147483647: Tests run over the GF(2147483647) field
    GF36893488147419103183: Tests run over the GF(36893488147419103183) field
    GF2m: Tests run over all the GF(2^m) fields
    GF4: Tests run over the GF(2^2) field
    GF8: Tests run over the GF(2^3) field
    GF256: Tests run over the GF(2^8) field
    GF2_32: Tests run over the GF(2^32)
    GF2_100: Tests run over the GF(2^100)
    GFpm: Tests run over all the GF(p^m) fields
    GF7_3: Tests run over all the GF(7^3) fields
    GF109987_4: Tests run over all the GF(109987^4) fields
    Z_add: Tests run over all additive groups
    Z17_add: Tests run over the Z(17, +) additive group
    Z10_20_add: Tests run over the Z(10^20, +) additive group
    Z_mul: Tests run over all multiplicative groups
    Z17_mul: Tests run over the Z(17, *) multiplicative group
    Z10_20_mul: Tests run over the Z(10^20, *) multiplicative group
# addopts = -v
testpaths = tests

[coverage:report]
exclude_lines =
    pragma: no cover
    raise AssertionError
    raise RuntimeError
    raise NotImplementedError
