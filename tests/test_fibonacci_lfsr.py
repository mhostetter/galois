"""
A pytest module to test the Fibonacci LFSR implementation.
"""
import pytest
import numpy as np

import galois


def test_output_is_reversed_state():
    poly = galois.Poly.Degrees([7,1,0])
    state = galois.GF2.Zeros(7)
    state[-1] = 1
    lfsr = galois.LFSR(poly, state=state)
    y = lfsr.step(7)
    assert np.array_equal(y, state[::-1])


def test_gf2_output_1():
    """
    SageMath:
        F = GF(2)
        o = F(0); l = F(1)
        key = [l,o,o,l]
        fill = [l,l,o,l]
        n = 20
        s = lfsr_sequence(key,fill,n); s
    """
    GF = galois.GF2
    poly = galois.Poly([1,0,0,1,1], field=GF)
    state = GF([1,0,1,1])
    y_truth = GF([1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,1,0,1,0])
    lfsr = galois.LFSR(poly, state=state)
    y = lfsr.step(y_truth.size)
    assert np.array_equal(y, y_truth)


def test_gf2_output_2():
    """
    SageMath:
        F = GF(2)
        o = F(0); l = F(1)
        key = [l,l,o,l]
        fill = [l,l,o,l]
        n = 20
        s = lfsr_sequence(key,fill,n); s
    """
    GF = galois.GF2
    poly = galois.Poly([1,1,0,1,1], field=GF)
    state = GF([1,0,1,1])
    y_truth = GF([1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1])
    lfsr = galois.LFSR(poly, state=state)
    y = lfsr.step(y_truth.size)
    assert np.array_equal(y, y_truth)


def test_gf2_output_3():
    """
    SageMath:
        F = GF(2)
        o = F(0); l = F(1)
        key = [l,o,o,o,l,l,l,o]
        fill = [l,o,o,o,o,o,o,o]
        n = 600
        s = lfsr_sequence(key,fill,n); np.array(s)
    """
    GF = galois.GF2
    poly = galois.Poly([1,0,0,0,1,1,1,0,1], field=GF)
    state = GF([0,0,0,0,0,0,0,1])
    y_truth = GF([1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1,1])
    lfsr = galois.LFSR(poly, state=state)
    y = lfsr.step(y_truth.size)
    assert np.array_equal(y, y_truth)


def test_gf3_output():
    """
    SageMath:
        F = GF(3)
        key = [F(2),F(0),F(0),F(2)]
        fill = [F(1),F(0),F(0),F(0)]
        n = 200
        s = lfsr_sequence(key,fill,n); np.array(s)
    """
    GF = galois.GF(3)
    poly = galois.Poly([2,0,0,2,1], field=GF)  # galois.conway_poly(3, 4) / GF(2)
    state = GF([0,0,0,1])
    y_truth = GF([1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2,1,2,1,0,2,2,0,0,1,0,0,0,2])
    lfsr = galois.LFSR(poly, state=state)
    y = lfsr.step(y_truth.size)
    assert np.array_equal(y, y_truth)


def test_gf5_output():
    """
    SageMath:
        F = GF(5)
        key = [F(3),F(0),F(3),F(1)]
        fill = [F(1),F(0),F(0),F(0)]
        n = 800
        s = lfsr_sequence(key,fill,n); np.array(s)
    """
    GF = galois.GF(5)
    poly = galois.Poly([3,0,3,1,1], field=GF)  # galois.conway_poly(5, 4) / GF(2)
    state = GF([0,0,0,1])
    y_truth = GF([1,0,0,0,3,3,2,1,1,3,2,4,3,4,4,3,4,0,4,3,2,1,4,1,4,0,4,2,1,2,2,4,3,1,1,1,3,4,1,1,3,3,0,2,1,1,4,3,3,0,1,0,2,2,1,2,1,3,4,4,4,0,4,1,0,3,0,2,2,2,3,0,0,1,0,3,3,0,4,3,4,3,2,0,3,2,2,3,3,3,3,1,4,1,2,3,1,3,2,0,4,3,1,0,0,4,2,4,0,4,0,4,4,3,0,1,3,0,4,2,3,4,0,3,2,3,4,2,0,0,2,3,4,3,1,4,4,0,0,2,4,0,2,3,1,0,4,3,3,2,3,3,1,1,3,0,2,0,0,0,1,1,4,2,2,1,4,3,1,3,3,1,3,0,3,1,4,2,3,2,3,0,3,4,2,4,4,3,1,2,2,2,1,3,2,2,1,1,0,4,2,2,3,1,1,0,2,0,4,4,2,4,2,1,3,3,3,0,3,2,0,1,0,4,4,4,1,0,0,2,0,1,1,0,3,1,3,1,4,0,1,4,4,1,1,1,1,2,3,2,4,1,2,1,4,0,3,1,2,0,0,3,4,3,0,3,0,3,3,1,0,2,1,0,3,4,1,3,0,1,4,1,3,4,0,0,4,1,3,1,2,3,3,0,0,4,3,0,4,1,2,0,3,1,1,4,1,1,2,2,1,0,4,0,0,0,2,2,3,4,4,2,3,1,2,1,1,2,1,0,1,2,3,4,1,4,1,0,1,3,4,3,3,1,2,4,4,4,2,1,4,4,2,2,0,3,4,4,1,2,2,0,4,0,3,3,4,3,4,2,1,1,1,0,1,4,0,2,0,3,3,3,2,0,0,4,0,2,2,0,1,2,1,2,3,0,2,3,3,2,2,2,2,4,1,4,3,2,4,2,3,0,1,2,4,0,0,1,3,1,0,1,0,1,1,2,0,4,2,0,1,3,2,1,0,2,3,2,1,3,0,0,3,2,1,2,4,1,1,0,0,3,1,0,3,2,4,0,1,2,2,3,2,2,4,4,2,0,3,0,0,0,4,4,1,3,3,4,1,2,4,2,2,4,2,0,2,4,1,3,2,3,2,0,2,1,3,1,1,2,4,3,3,3,4,2,3,3,4,4,0,1,3,3,2,4,4,0,3,0,1,1,3,1,3,4,2,2,2,0,2,3,0,4,0,1,1,1,4,0,0,3,0,4,4,0,2,4,2,4,1,0,4,1,1,4,4,4,4,3,2,3,1,4,3,4,1,0,2,4,3,0,0,2,1,2,0,2,0,2,2,4,0,3,4,0,2,1,4,2,0,4,1,4,2,1,0,0,1,4,2,4,3,2,2,0,0,1,2,0,1,4,3,0,2,4,4,1,4,4,3,3,4,0,1,0,0,0,3,3,2,1,1,3,2,4,3,4,4,3,4,0,4,3,2,1,4,1,4,0,4,2,1,2,2,4,3,1,1,1,3,4,1,1,3,3,0,2,1,1,4,3,3,0,1,0,2,2,1,2,1,3,4,4,4,0,4,1,0,3,0,2,2,2,3,0,0,1,0,3,3,0,4,3,4,3,2,0,3,2,2,3,3,3,3,1,4,1,2,3,1,3,2,0,4,3,1,0,0,4,2,4,0,4,0,4,4,3,0,1,3,0,4,2,3,4,0,3,2,3,4,2,0,0,2,3,4,3,1,4,4,0,0,2,4,0,2,3,1,0,4,3,3,2,3,3,1,1,3,0,2,0,0,0,1,1,4,2,2,1,4,3,1,3,3,1,3,0,3,1])
    lfsr = galois.LFSR(poly, state=state)
    y = lfsr.step(y_truth.size)
    assert np.array_equal(y, y_truth)
