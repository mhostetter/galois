"""
A pytest module to test finding the roots of polynomials over Galois fields.

Sage:
    to_coeffs = lambda poly: poly.coefficients(sparse=False)[::-1] if poly != 0 else [0]

    PARAMS = [(2,1), (2,8), (3,1), (3,5), (5,1), (5,4)]
    N = 20
    for p, m in PARAMS:
        print(f"POLY_ROOTS_{p}_{m} = [")
        R = GF(p**m, repr="int")["x"]
        for _ in range(N):
            poly = R.random_element(randint(0, 10))
            roots = poly.roots()
            if len(roots) == 0:
                r, m = [], []
            else:
                r, m = zip(*roots)
            print(f"    ({to_coeffs(poly)}, {list(r)}, {list(m)}),")
        print("]\n")
"""
import pytest
import numpy as np

import galois

PARAMS = [(2,1), (2,8), (3,1), (3,5), (5,1), (5,4)]

# LUT items are (poly coefficients, roots, multiplicities)

POLY_ROOTS_2_1 = [
    ([1, 0, 0, 1, 1], [], []),
    ([1, 0, 0, 0, 0, 1, 0], [0, 1], [1, 1]),
    ([1, 1, 1], [], []),
    ([1, 1, 1, 1, 0, 1], [], []),
    ([1, 1, 1, 0, 1, 1, 0], [0], [1]),
    ([1, 0, 1, 0, 0], [0, 1], [2, 2]),
    ([1, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0], [2]),
    ([1, 0, 0, 1, 1, 1, 0, 1], [], []),
    ([1, 1], [1], [1]),
    ([1, 1, 0], [0, 1], [1, 1]),
    ([1, 1, 1, 1], [1], [3]),
    ([1, 1, 0, 0, 0, 0, 0, 1], [], []),
    ([1, 0], [0], [1]),
    ([1], [], []),
    ([1, 1, 0, 0, 0, 1], [], []),
    ([1, 0, 1, 0, 1, 0], [0], [1]),
    ([1, 1], [1], [1]),
    ([1, 1, 0, 0], [1, 0], [1, 2]),
    ([1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0], [4]),
    ([1, 1, 1, 0, 0, 0, 1, 1], [], []),
]

POLY_ROOTS_2_8 = [
    ([130, 89, 62, 237, 75], [128], [1]),
    ([90, 243], [249], [1]),
    ([189], [], []),
    ([201, 141, 142, 111, 20], [113, 185], [1, 1]),
    ([26, 19, 35, 113, 245, 248, 250, 88, 172, 98], [], []),
    ([19], [], []),
    ([79, 91, 38, 200, 220, 254, 181, 119, 103, 29], [], []),
    ([206, 14, 113, 149, 196, 140], [74, 104], [1, 1]),
    ([20, 107, 69, 1, 127], [], []),
    ([21, 195, 156, 175, 110, 218, 75, 37, 136, 76], [147], [1]),
    ([175, 16], [191], [1]),
    ([156, 199, 109], [66, 249], [1, 1]),
    ([187, 211, 51, 246], [227], [1]),
    ([195, 196, 255, 189, 94, 229, 138, 233, 126, 102], [229], [1]),
    ([184, 208, 187, 129, 178, 125, 100, 43, 229, 129], [], []),
    ([10, 238, 122, 157], [138], [1]),
    ([249, 202], [62], [1]),
    ([178, 232, 225, 247, 38, 179, 169], [167], [1]),
    ([45, 33, 137, 34, 218, 151], [], []),
    ([162, 196], [122], [1]),
]

POLY_ROOTS_3_1 = [
    ([1, 2, 0, 1], [], []),
    ([2, 2, 1, 0, 2], [2], [1]),
    ([2, 0, 1, 0, 2], [], []),
    ([2, 1, 0], [0, 1], [1, 1]),
    ([2, 2, 0, 2], [1], [1]),
    ([1, 1, 0, 1, 2, 0, 0, 0], [0], [3]),
    ([2], [], []),
    ([1, 0, 2, 0, 2, 1, 1, 0, 2], [1], [2]),
    ([1, 2, 0], [0, 1], [1, 1]),
    ([1, 2, 0, 0, 2, 1, 2, 0, 2], [], []),
    ([2, 0, 0, 0, 2, 1, 0, 1, 0, 2], [2], [1]),
    ([1, 1, 0, 2, 0, 0, 0, 0], [0], [4]),
    ([2, 2, 2], [1], [2]),
    ([1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0], [2]),
    ([2], [], []),
    ([1, 0, 0, 1, 1, 2], [], []),
    ([2, 0, 2, 2, 1, 2, 0, 0, 1, 2], [1, 2], [1, 2]),
    ([1, 2, 2, 1, 0, 0, 2, 0], [0], [1]),
    ([2, 0, 0, 2, 2, 0, 0, 2, 1, 1], [2], [1]),
    ([1, 2, 2, 1, 0, 2], [], []),
]

POLY_ROOTS_3_5 = [
    ([189, 43, 1, 165, 141, 189, 238, 204, 138, 119], [103], [1]),
    ([218, 75, 62], [40, 157], [1, 1]),
    ([153, 199], [49], [1]),
    ([121, 238, 181, 224], [], []),
    ([107, 2, 238, 224, 146, 197, 195, 19, 161], [49], [1]),
    ([115, 145, 218, 130, 126, 167, 194, 69], [33], [1]),
    ([129, 205, 221, 43, 20], [124], [1]),
    ([91, 136, 36, 160], [], []),
    ([14], [], []),
    ([67, 191], [179], [1]),
    ([8, 102, 79, 62, 191, 50, 219], [], []),
    ([194, 140, 116, 188, 2, 7, 153, 121, 149], [170, 188], [1, 1]),
    ([71, 25, 76, 182, 68], [236], [1]),
    ([2, 92, 39, 62, 10], [13, 62, 38, 99], [1, 1, 1, 1]),
    ([119, 27, 54, 34, 54, 8, 134, 192], [], []),
    ([150, 101, 184, 47, 229, 214, 191, 184], [], []),
    ([60], [], []),
    ([117, 101, 49], [], []),
    ([149, 171, 220, 66, 152, 24, 92, 107], [229], [1]),
    ([37, 206, 77, 74, 32, 175, 15, 39], [9, 193], [1, 1]),
]

POLY_ROOTS_5_1 = [
    ([3, 0, 0, 0, 0, 3, 4, 0], [0, 3, 1], [1, 1, 1]),
    ([3, 1, 0, 1, 1, 4], [1], [1]),
    ([2, 4, 0, 1, 0, 3, 0, 2], [3], [1]),
    ([4, 1, 3], [], []),
    ([2, 1, 1, 0, 4, 0, 3, 0, 3], [], []),
    ([4, 3, 3, 0, 0, 3, 1], [], []),
    ([4, 0, 0, 0, 1, 1, 1], [4], [2]),
    ([1, 4, 4], [3], [2]),
    ([4, 3, 1, 2, 3, 1, 3, 0], [0, 4], [1, 1]),
    ([4, 3, 1, 2, 3, 0], [0], [1]),
    ([3, 2, 4, 0, 4, 0, 2, 2, 4, 3], [4], [3]),
    ([2, 2, 0, 1, 4], [], []),
    ([3], [], []),
    ([4, 0, 0], [0], [2]),
    ([1, 2, 3, 4, 0, 0, 2, 1, 1, 3, 4], [], []),
    ([1, 3, 4, 3, 3], [3, 2], [1, 1]),
    ([2, 0, 0, 1, 1, 1, 4, 4], [], []),
    ([1, 2, 3], [], []),
    ([3, 4, 1, 1, 3, 1, 4, 2, 1], [1], [1]),
    ([2, 1, 4, 2, 2, 2, 4, 3, 0, 0, 4], [], []),
]

POLY_ROOTS_5_4 = [
    ([323, 73, 209, 559, 350], [], []),
    ([471, 318, 85, 319, 524, 222], [], []),
    ([346, 369, 439, 454, 317, 189, 349, 557, 350, 524, 246], [], []),
    ([501], [], []),
    ([504], [], []),
    ([603, 167, 88, 442, 139], [], []),
    ([148, 127, 133, 520, 212], [], []),
    ([471, 595, 351, 442, 530, 237, 215, 124], [7, 363, 130], [1, 1, 1]),
    ([585, 593, 469, 514, 414, 301, 88, 545, 536, 251], [103, 483], [1, 1]),
    ([464, 263, 430, 562, 433, 352, 545], [349, 330], [1, 1]),
    ([73], [], []),
    ([581], [], []),
    ([438, 56], [167], [1]),
    ([196, 9, 321, 78, 175, 333, 300, 134, 317, 532], [101, 172], [1, 1]),
    ([167, 71, 360, 193], [56], [1]),
    ([332, 299, 440, 274, 74, 296, 146, 36, 152, 233, 477], [453, 458, 249, 154], [1, 1, 1, 1]),
    ([189], [], []),
    ([340, 617, 207, 374, 37], [418], [1]),
    ([151, 214, 265, 9, 372, 515, 10, 607], [], []),
    ([359, 82, 465, 20, 319, 43, 216, 529, 48, 82, 408], [321], [1]),
]


def test_roots_exceptions():
    p = galois.Poly.Random(5)

    with pytest.raises(TypeError):
        p.roots(multiplicity=1)


@pytest.mark.parametrize("characteristic,degree", PARAMS)
def test_roots(characteristic, degree):
    GF = galois.GF(characteristic**degree)
    LUT = eval(f"POLY_ROOTS_{characteristic}_{degree}")
    for item in LUT:
        poly = galois.Poly(item[0], field=GF)
        roots, multiplicities = item[1:3]
        if len(roots) > 0:
            roots, multiplicities = zip(*sorted(zip(roots, multiplicities), key=lambda item: item[0]))  # Sort roots ascending
        r = poly.roots()
        assert np.array_equal(r, roots)


@pytest.mark.parametrize("characteristic,degree", PARAMS)
def test_roots_with_multiplicity(characteristic, degree):
    GF = galois.GF(characteristic**degree)
    LUT = eval(f"POLY_ROOTS_{characteristic}_{degree}")
    for item in LUT:
        poly = galois.Poly(item[0], field=GF)
        roots, multiplicities = item[1:3]
        if len(roots) > 0:
            roots, multiplicities = zip(*sorted(zip(roots, multiplicities), key=lambda item: item[0]))  # Sort roots ascending
        r, m = poly.roots(multiplicity=True)
        assert np.array_equal(r, roots)
        assert np.array_equal(m, multiplicities)
