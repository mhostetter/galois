"""
A pytest module to test factoring polynomials over Galois fields.

Sage:
    to_coeffs = lambda poly: poly.coefficients(sparse=False)[::-1] if poly != 0 else [0]

    PARAMS = [(2,1), (2,8), (3,1), (3,5), (5,1), (5,4)]
    N = 20
    for p, m in PARAMS:
        print(f"POLY_FACTORS_{p}_{m} = [")
        R = GF(p**m, repr="int")["x"]
        for _ in range(N):
            a = R.random_element(randint(10, 40))
            a = a / a.coefficients()[-1]  # Make monic
            polys = []
            exponents = []
            for item in factor(a):
                polys.append(to_coeffs(item[0]))
                exponents.append(item[1])
            print(f"    ({to_coeffs(a)}, {polys}, {exponents}),")
        print("]\n")
"""
import random

import pytest

import galois

PARAMS = [(2,1), (2,8), (3,1), (3,5), (5,1), (5,4)]

# LUT items are (a(x), factors(x), multiplicities). All coefficients in degree-descending order.

POLY_FACTORS_2_1 = [
    ([1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [[1, 1], [1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]], [1, 2, 1]),
    ([1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [[1, 0], [1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1]], [1, 1, 1]),
    ([1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [[1, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1]], [1, 1]),
    ([1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [[1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1]], [1]),
    ([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [[1, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1]], [1, 1]),
    ([1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [[1, 0], [1, 1], [1, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1]], [1, 2, 1, 1]),
    ([1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [[1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1]], [1, 1]),
    ([1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0], [[1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1]], [1, 1, 1]),
    ([1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [[1, 1], [1, 0, 0, 0, 1, 1, 1, 1]], [3, 1]),
    ([1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [[1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1]], [3, 1, 1]),
    ([1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0], [[1, 1], [1, 0], [1, 0, 1, 1], [1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1]], [1, 2, 1, 1, 1, 1]),
    ([1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0], [[1, 0], [1, 1], [1, 1, 0, 1], [1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1]], [1, 3, 1, 1, 1]),
    ([1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [[1, 1], [1, 0], [1, 1, 0, 1], [1, 0, 1, 1]], [1, 5, 1, 2]),
    ([1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [[1, 0, 0, 1, 0, 1]], [2]),
    ([1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0], [[1, 0], [1, 1], [1, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1]], [1, 2, 1, 1, 1]),
    ([1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [[1, 0], [1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 1]], [2, 2, 2]),
    ([1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [[1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1]], [1, 1]),
    ([1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [[1, 0], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1]], [2, 1]),
    ([1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [[1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]], [2, 1]),
    ([1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [[1, 0], [1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]], [2, 1, 1, 1]),
]

POLY_FACTORS_2_8 = [
    ([1, 176, 27, 89, 101, 38, 100, 172, 81, 36, 53, 201, 181, 125], [[1, 13, 13], [1, 40, 100], [1, 85, 172], [1, 102, 57, 253], [1, 166, 215, 243, 57]], [1, 1, 1, 1, 1]),
    ([1, 240, 245, 124, 104, 144, 231, 220, 244, 134, 112, 142, 120, 182, 195], [[1, 231], [1, 66, 164], [1, 85, 70, 209, 32, 134, 40, 43, 138, 169, 212, 88]], [1, 1, 1]),
    ([1, 254, 80, 27, 235, 126, 236, 119, 138, 134, 139, 218, 177, 156, 174, 193, 126, 156, 130, 49, 118, 88, 80, 174, 12, 96, 229, 241, 89, 9, 4, 126, 15, 141, 113, 82], [[1, 128], [1, 205, 124], [1, 171, 124, 223, 48, 121], [1, 24, 54, 210, 32, 89, 53, 135, 250, 154, 74, 73, 59, 91, 170, 218, 113, 174, 202, 251, 132, 181, 239, 0, 103, 43, 168, 47]], [1, 1, 1, 1]),
    ([1, 109, 220, 184, 96, 104, 181, 65, 23, 74, 58, 227, 150, 123, 110, 131, 231, 95, 246, 246, 166, 161, 226], [[1, 96], [1, 186], [1, 45, 212, 47, 129, 37, 68, 173], [1, 154, 251, 152, 109, 183, 21, 199, 46, 105, 28, 218, 106, 232]], [1, 1, 1, 1]),
    ([1, 172, 228, 114, 134, 223, 230, 35, 139, 79, 213], [[1, 172, 228, 114, 134, 223, 230, 35, 139, 79, 213]], [1]),
    ([1, 172, 94, 216, 14, 17, 150, 32, 21, 191, 116, 193, 78, 83, 166, 240, 46, 222, 93, 248, 202, 184, 175, 58, 82, 62, 231, 100], [[1, 165], [1, 192, 99], [1, 201, 137, 69, 22, 187, 243, 52, 109, 220, 111, 158, 229, 61, 197, 45, 97, 19, 200, 232, 253, 190, 202, 153, 134]], [1, 1, 1]),
    ([1, 42, 6, 33, 155, 81, 242, 54, 242, 34, 51, 65, 239, 181, 70, 128, 168, 73, 22, 198, 229, 78, 86, 133, 248, 101, 192, 38, 219, 6], [[1, 129], [1, 147], [1, 182], [1, 209], [1, 213], [1, 8, 243, 106, 164, 58, 235, 168, 177], [1, 130, 91, 118, 193, 13, 174, 198, 225, 130, 230, 176, 193, 180, 96, 242, 161]], [1, 1, 1, 1, 1, 1, 1]),
    ([1, 10, 249, 126, 183, 108, 84, 179, 34, 196, 151, 134, 85, 60, 33, 84, 180, 227, 101, 255, 176, 156, 166, 250, 79, 235, 193, 169, 34, 168, 90, 217, 7, 140, 249, 120, 114, 180, 183, 60, 27], [[1, 52], [1, 167], [1, 202], [1, 83, 247, 97, 253, 32, 8, 1, 23, 200, 124, 16, 85, 173, 198, 55, 216, 144, 100, 71, 163, 210, 72, 195, 54, 45, 72, 141, 45, 25, 100, 189, 250, 163, 157, 62, 29, 147]], [1, 1, 1, 1]),
    ([1, 189, 113, 65, 213, 177, 192, 212, 103, 255, 192, 90, 129, 211, 54, 32, 216, 128, 41, 54, 179, 189, 214, 254, 92, 183, 138, 184], [[1, 53], [1, 93], [1, 51, 242, 225], [1, 51, 146, 190, 248, 85, 76, 125, 170, 151, 63], [1, 213, 165, 228, 91, 37, 210, 211, 17, 160, 251, 253, 74]], [1, 1, 1, 1, 1]),
    ([1, 192, 93, 241, 75, 1, 166, 229, 194, 16, 18, 75, 56, 128], [[1, 192, 93, 241, 75, 1, 166, 229, 194, 16, 18, 75, 56, 128]], [1]),
    ([1, 87, 209, 146, 181, 154, 57, 29, 178, 24, 158, 239, 124, 255, 42, 172, 89, 207, 67, 23, 193, 231, 92, 117, 110, 193, 42, 34, 212, 159, 71, 98, 202, 146, 112], [[1, 189, 99, 82, 156, 168, 8, 111, 133, 251, 19, 107, 196, 103], [1, 234, 238, 101, 105, 159, 101, 124, 17, 243, 79, 26, 46, 198, 86, 139, 181, 17, 10, 185, 230, 91]], [1, 1]),
    ([1, 236, 241, 100, 238, 124, 109, 173, 114, 180, 27, 99, 214, 196, 112, 50, 184, 228, 246, 119], [[1, 89], [1, 122, 44, 160], [1, 207, 220, 81, 233, 207, 62, 171, 87, 195, 147, 97, 36, 81, 48, 39]], [1, 1, 1]),
    ([1, 73, 252, 86, 232, 92, 37, 21, 120, 38, 179, 57, 3, 49, 2, 53, 140, 41, 220, 164, 108, 60, 166], [[1, 10, 200], [1, 76, 166, 164, 82, 162, 38], [1, 77, 109, 102, 62, 119, 28], [1, 66, 200, 81, 176, 57, 108, 127, 10]], [1, 1, 1, 1]),
    ([1, 148, 137, 157, 95, 188, 103, 132, 133, 178, 80, 173, 156, 115, 5, 18, 50, 112, 111, 67, 187, 221, 230, 245, 188, 28, 244, 52, 73, 170, 140, 56, 126, 222, 169, 92, 67, 254, 94, 140], [[1, 106, 193], [1, 242, 150, 210], [1, 11, 176, 207, 105, 255, 68, 96, 190, 73, 163, 179, 15], [1, 7, 246, 142, 8, 239, 13, 218, 140, 123, 251, 32, 162, 73, 255, 32, 245, 140, 241, 118, 14, 43, 51]], [1, 1, 1, 1]),
    ([1, 33, 204, 181, 133, 237, 8, 96, 222, 146, 2, 242], [[1, 203], [1, 213, 183, 82, 214], [1, 63, 234, 69, 86, 200, 41]], [1, 1, 1]),
    ([1, 20, 1, 22, 211, 153, 0, 220, 123, 244, 59, 77, 162, 45, 110, 215, 145, 0, 204, 165, 25, 29, 41, 18, 250, 82, 46, 110], [[1, 134, 187, 68], [1, 144, 205, 209], [1, 2, 231, 218, 141, 229, 3, 220, 144, 217, 237, 157, 190, 192, 49, 219, 156, 248, 192, 109, 175, 171]], [1, 1, 1]),
    ([1, 205, 125, 253, 252, 103, 162, 245, 160, 224, 14, 89, 244, 12, 250, 226, 128, 248, 27, 8, 195, 255, 180, 51, 241, 113, 192, 140, 34, 225, 213, 183, 178, 36, 195, 3, 237, 42, 52, 230], [[1, 81, 66], [1, 145, 2], [1, 95, 166, 77], [1, 213, 95, 158], [1, 135, 4, 39, 152, 209, 13, 111, 11, 126, 86, 130, 200, 1, 56, 9, 17, 177, 5, 110, 149, 207, 210, 48, 206, 62, 115, 213, 102, 27]], [1, 1, 1, 1, 1]),
    ([1, 67, 57, 153, 229, 212, 204, 156, 168, 107, 35], [[1, 255], [1, 113, 58, 248, 34], [1, 205, 248, 251, 65, 6]], [1, 1, 1]),
    ([1, 15, 27, 97, 159, 237, 80, 129, 115, 219, 174, 63, 249, 248, 53, 10, 77, 73, 85, 130, 154, 65, 156, 171, 244, 78, 177, 246, 45, 162, 212, 194, 199, 214, 122], [[1, 61], [1, 112], [1, 158], [1, 163, 61, 39, 68, 125, 12, 82, 34], [1, 127, 109, 169, 216, 113, 4, 32, 94, 189, 213, 94, 193, 103, 66, 213, 38, 55, 80, 0, 85, 49, 38, 188]], [1, 1, 1, 1, 1]),
    ([1, 99, 157, 79, 210, 226, 69, 176, 250, 71, 108, 97, 97, 132, 65, 88, 63, 243, 136, 26, 166, 215, 133, 73, 31, 249], [[1, 13, 149], [1, 109, 205, 96, 88], [1, 118, 204, 148, 150, 251, 31, 57], [1, 117, 8, 185, 187, 18, 47, 100, 22, 37, 81, 10, 77]], [1, 1, 1, 1]),
]

POLY_FACTORS_3_1 = [
    ([1, 0, 1, 1, 0, 0, 0, 2, 0, 1, 2, 0, 1, 2, 2, 1, 1, 1, 0, 0, 2], [[1, 2], [1, 0, 1], [1, 2, 1, 0, 1, 2], [1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2]], [1, 1, 1, 1]),
    ([1, 2, 2, 0, 0, 0, 0, 1, 0, 0, 1], [[1, 1, 2], [1, 1, 2, 2, 0, 2, 1, 2, 2]], [1, 1]),
    ([1, 0, 1, 0, 0, 1, 2, 0, 1, 2, 0, 2, 1, 1, 0, 2, 1, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 2, 2, 1, 1, 1, 1, 1, 0, 2, 2, 1, 0], [[1, 0], [1, 1], [1, 2], [1, 1, 2], [1, 2, 0, 1], [1, 0, 0, 0, 2, 2, 2, 2, 1, 1, 0, 2], [1, 0, 1, 1, 1, 0, 0, 2, 0, 2, 2, 1, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2]], [1, 1, 1, 1, 1, 1, 1]),
    ([1, 0, 1, 0, 2, 0, 0, 1, 2, 0, 0, 2, 0, 2, 0, 2, 1, 2, 0], [[1, 0], [1, 0, 2, 2, 1, 1, 1], [1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 2, 2]], [1, 1, 1]),
    ([1, 1, 0, 0, 2, 0, 1, 1, 2, 2, 0, 1, 0, 1, 2, 1, 1, 1, 2, 2, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 2, 0, 1, 2, 2, 2, 0, 1, 1], [[1, 1], [1, 0, 2, 1], [1, 2, 2, 2, 0, 1, 2, 2, 2, 2, 1], [1, 1, 0, 1, 2, 1, 2, 1, 2, 0, 1, 0, 0, 1, 2, 2, 0, 1, 1, 0, 0, 2, 0, 1, 2, 1]], [1, 1, 1, 1]),
    ([1, 2, 1, 2, 2, 1, 1, 2, 0, 2, 2, 1, 0, 1], [[1, 2], [1, 1, 2, 0, 2, 0, 2, 1, 2]], [5, 1]),
    ([1, 1, 1, 1, 2, 0, 0, 0, 2, 0, 0, 1, 2, 2, 1, 0, 0, 0, 1, 1], [[1, 1, 2], [1, 1, 1, 0, 1], [1, 2, 2, 1, 1, 2, 0, 1, 1, 0, 1, 1, 1, 2]], [1, 1, 1]),
    ([1, 0, 1, 1, 0, 1, 0, 0, 2, 2, 1, 0, 0, 2, 1, 0, 2, 0, 2, 2, 0, 1, 0, 0, 0, 2, 2, 1, 0, 0, 2, 0, 2, 0, 1, 1], [[1, 2], [1, 0, 1], [1, 2, 2], [1, 0, 2, 0, 2, 0, 2, 2, 2], [1, 1, 1, 2, 2, 0, 1, 1, 2, 2, 2, 1, 1, 0, 0, 0, 2, 1, 0, 2]], [2, 1, 2, 1, 1]),
    ([1, 2, 1, 0, 0, 1, 1, 2, 1, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0, 1, 2, 0, 0, 0, 2, 0, 2, 1, 1, 1, 1, 0, 0, 2, 1, 1, 1], [[1, 0, 1, 1, 0, 1, 0, 2, 2, 2, 2, 2], [1, 0, 2, 0, 2, 1, 1, 1, 1, 1, 1, 0, 2], [1, 2, 1, 2, 0, 0, 2, 0, 2, 0, 2, 1, 0, 1]], [1, 1, 1]),
    ([1, 0, 1, 0, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1], [[1, 2], [1, 1], [1, 1, 2], [1, 2, 1, 1, 2, 0, 1], [1, 2, 1, 2, 0, 1, 1]], [1, 2, 1, 1, 1]),
    ([1, 1, 1, 2, 0, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 0], [[1, 0], [1, 2], [1, 0, 0, 1, 2], [1, 2, 0, 1, 1, 2, 1, 0, 0, 0, 2, 0, 1, 0, 0, 2]], [1, 1, 1, 1]),
    ([1, 0, 2, 2, 2, 2, 2, 1, 2, 0, 0, 1, 0, 2, 1, 1, 1, 2, 1, 1, 0, 0, 0, 0], [[1, 1], [1, 2], [1, 0], [1, 0, 1], [1, 0, 0, 0, 0, 1, 2], [1, 1, 0, 2, 2, 0, 2, 0, 2]], [1, 2, 4, 1, 1, 1]),
    ([1, 1, 1, 0, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 2, 2, 1, 2, 0, 1, 0, 1, 2, 0, 0, 1], [[1, 1], [1, 2], [1, 2, 2, 1, 0, 0, 2], [1, 0, 2, 0, 0, 2, 0, 1, 2, 2, 1, 1, 2, 1, 1, 0, 1, 1, 2, 2]], [1, 2, 1, 1]),
    ([1, 0, 1, 1, 1, 2, 0, 0, 0, 1, 0, 0, 2, 0, 0, 2, 0], [[1, 0], [1, 0, 1], [1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 2]], [1, 1, 1, 1]),
    ([1, 0, 1, 1, 0, 1, 0, 1, 2, 2, 0], [[1, 0], [1, 2], [1, 2, 1, 1, 1, 2, 0, 2]], [1, 2, 1]),
    ([1, 2, 2, 0, 1, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 0, 0, 0, 0, 1, 0, 2, 2, 1, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2], [[1, 1], [1, 1, 0, 2, 1], [1, 0, 0, 1, 1, 0, 2, 1, 1, 2, 1, 1, 1, 1], [1, 0, 1, 1, 1, 0, 2, 0, 0, 1, 1, 1, 0, 1, 1, 2]], [1, 1, 1, 1]),
    ([1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 2, 1, 1, 1, 1, 0, 0, 1, 2, 2, 2, 0, 1, 0], [[1, 0], [1, 2], [1, 1, 2, 1], [1, 1, 0, 1, 1, 2, 2, 0, 2], [1, 1, 1, 1, 2, 2, 2, 1, 2, 1, 0, 0, 0, 0, 2]], [1, 2, 1, 1, 1]),
    ([1, 1, 2, 2, 2, 2, 2, 1, 0, 1, 0, 0, 1, 2, 0, 1, 1, 1], [[1, 1, 2, 2, 2, 2, 2, 1, 0, 1, 0, 0, 1, 2, 0, 1, 1, 1]], [1]),
    ([1, 2, 2, 2, 2, 2, 2, 1, 0, 1, 0, 0, 2], [[1, 2, 2, 0, 0, 2], [1, 0, 0, 2, 1, 0, 0, 1]], [1, 1]),
    ([1, 0, 1, 0, 0, 2, 2, 0, 0, 1, 1, 2, 0, 2, 1, 1, 2, 0, 2, 0, 2, 0, 1, 1, 1, 1, 0, 0, 0], [[1, 2], [1, 0], [1, 2, 1, 1], [1, 2, 0, 2, 2, 1, 0, 0, 2, 0, 0, 2, 0, 1, 0, 1, 1, 1, 2, 0, 2, 2]], [1, 3, 1, 1]),
]

POLY_FACTORS_3_5 = [
    ([1, 176, 92, 2, 84, 30, 171, 56, 232, 189, 160, 237, 28, 165, 207, 151, 54, 157, 233, 145, 131, 238, 231, 73, 219, 224, 17, 195, 45, 94, 126, 71, 84, 163, 64, 228, 56, 19, 212, 138, 204], [[1, 146], [1, 211], [1, 224], [1, 123, 220], [1, 158, 201, 143], [1, 238, 29, 96], [1, 24, 151, 118, 86, 78, 33], [1, 219, 6, 7, 170, 234, 136, 237, 69, 70, 233, 117, 137, 173, 204, 202, 166, 65, 168, 226, 149, 116, 28, 207]], [1, 1, 1, 1, 1, 1, 1, 1]),
    ([1, 0, 114, 210, 168, 126, 0, 229, 209, 35, 207, 193], [[1, 76], [1, 196, 162, 108], [1, 91, 205, 237, 6, 189, 177, 212]], [1, 1, 1]),
    ([1, 95, 167, 52, 135, 82, 38, 194, 102, 194, 153], [[1, 72], [1, 121], [1, 204], [1, 82, 87], [1, 57, 228, 171, 58, 106]], [1, 1, 1, 1, 1]),
    ([1, 78, 163, 122, 178, 71, 142, 103, 226, 12, 131, 113, 3, 199, 206, 214, 17, 213, 99, 120, 161, 43, 129, 35, 242, 54, 152, 179, 109, 225, 227], [[1, 81], [1, 135], [1, 164], [1, 13, 128], [1, 42, 129, 28, 15, 196], [1, 196, 219, 76, 54, 102], [1, 205, 209, 44, 141, 130, 189], [1, 103, 93, 97, 176, 49, 210, 18, 13, 125]], [1, 1, 1, 1, 1, 1, 1, 1]),
    ([1, 183, 123, 30, 168, 153, 43, 151, 0, 18, 76, 65, 122, 11, 188, 136, 44, 154, 185, 84, 238, 56, 194, 33, 1, 21, 152], [[1, 231, 134, 161, 10, 116, 210, 42], [1, 35, 61, 58, 110, 87, 217, 207, 11, 67], [1, 10, 192, 54, 75, 169, 42, 111, 2, 232, 96]], [1, 1, 1]),
    ([1, 121, 95, 70, 132, 85, 74, 49, 44, 127, 233, 209, 154, 221, 121, 29, 155, 31], [[1, 185], [1, 194], [1, 29, 132], [1, 158, 73, 72], [1, 63, 41, 132, 35], [1, 212, 93, 110, 111, 32, 112]], [1, 1, 1, 1, 1, 1]),
    ([1, 149, 91, 153, 84, 189, 159, 77, 140, 5, 17, 185, 230, 10], [[1, 52], [1, 44, 202, 169], [1, 108, 89, 104, 118], [1, 65, 165, 155, 2, 151]], [1, 1, 1, 1]),
    ([1, 124, 61, 167, 110, 164, 76, 163, 204, 96, 111, 186, 104, 182, 240, 60, 139, 117, 64, 212, 47, 104, 202, 36, 6, 216, 15, 13, 169, 134, 236, 226, 153, 98, 185, 96], [[1, 216], [1, 56, 91], [1, 179, 169, 98, 240, 96, 31, 99, 113, 220, 106, 145, 100, 75, 61, 16, 56, 20, 95, 67, 75, 21, 240, 206, 158, 96, 237, 154, 41, 34, 121, 88, 216]], [1, 1, 1]),
    ([1, 24, 2, 102, 37, 170, 201, 167, 142, 142, 78, 35, 181, 47, 139, 139, 208, 195, 169, 131, 162, 235, 196, 30, 38, 238, 8, 204, 216], [[1, 29], [1, 119, 36, 91, 129, 182, 71, 235, 67], [1, 206, 221, 212, 41, 122, 117, 112, 137, 104, 240, 7, 70, 44, 234, 124, 127, 102, 24, 48]], [1, 1, 1]),
    ([1, 194, 38, 71, 206, 181, 191, 218, 220, 22, 68, 158, 201, 75, 15, 234, 30, 91, 225, 101, 58, 165, 12, 31, 215, 50, 159, 131], [[1, 35], [1, 102], [1, 228, 150], [1, 141, 84, 124], [1, 142, 62, 38, 22, 87, 46, 196], [1, 8, 153, 182, 134, 71, 137, 160, 18, 84, 92, 147, 155, 61]], [1, 1, 1, 1, 1, 1]),
    ([1, 228, 207, 110, 149, 12, 170, 101, 96, 240, 116, 53, 8, 152, 2, 128, 89, 236, 120, 4, 134, 195], [[1, 92], [1, 234, 52], [1, 186, 172, 56, 41, 185, 7, 3, 39], [1, 25, 82, 241, 213, 39, 135, 168, 229, 197, 88]], [1, 1, 1, 1]),
    ([1, 151, 82, 62, 74, 50, 90, 235, 234, 188, 33, 121, 71, 151, 192, 235, 232, 106, 146, 129, 217], [[1, 180], [1, 105, 104], [1, 97, 226, 65, 148], [1, 75, 54, 97, 9, 40, 157, 108, 62, 160, 49, 14, 208, 182]], [1, 1, 1, 1]),
    ([1, 161, 55, 159, 101, 230, 186, 110, 45, 23, 2, 92], [[1, 126], [1, 226, 30], [1, 160, 80, 42, 224, 3, 234, 169, 217]], [1, 1, 1]),
    ([1, 103, 191, 38, 178, 69, 107, 3, 219, 125, 184, 116, 104, 18, 240, 142, 22, 194, 137, 1, 138, 188, 155, 230, 143], [[1, 51, 188, 119], [1, 99, 43, 54, 139, 137], [1, 221, 27, 216, 198, 36, 236, 139], [1, 95, 183, 123, 117, 96, 156, 114, 118, 205]], [1, 1, 1, 1]),
    ([1, 220, 67, 22, 240, 106, 81, 235, 212, 64, 187, 51], [[1, 167, 237], [1, 107, 212, 19], [1, 228, 190, 53, 56, 104, 151]], [1, 1, 1]),
    ([1, 158, 35, 169, 161, 130, 14, 242, 66, 208, 75, 72, 69, 40, 67, 2, 134, 142, 104, 48, 55, 30, 2, 151, 89, 8, 53], [[1, 148, 40], [1, 228, 94, 241, 226, 211, 31, 190, 118, 81, 64], [1, 115, 19, 210, 115, 173, 2, 31, 67, 11, 54, 192, 200, 230, 88]], [1, 1, 1]),
    ([1, 52, 56, 239, 189, 206, 139, 86, 134, 105, 128, 209, 12, 15, 201], [[1, 14], [1, 113, 135, 46, 81, 128], [1, 171, 35, 65, 14, 141, 202, 20, 45]], [1, 1, 1]),
    ([1, 211, 164, 81, 162, 77, 82, 127, 101, 223, 0, 150, 194, 137, 0, 120, 126, 112, 79, 35, 118, 93, 105, 179, 115, 44, 209, 8, 76, 167, 51, 160, 196, 160, 60, 150, 45, 63], [[1, 97, 16, 152, 71], [1, 145, 76, 26, 82, 170, 224, 182, 127, 38, 18, 31, 117, 99, 187], [1, 62, 52, 67, 168, 39, 79, 207, 57, 134, 197, 235, 12, 75, 5, 53, 241, 211, 213, 156]], [1, 1, 1]),
    ([1, 222, 157, 240, 57, 168, 80, 156, 80, 43, 206, 172, 168, 99, 216, 113, 34, 12, 201, 172, 43], [[1, 45, 177, 223, 95, 144, 140, 71, 79, 236, 171], [1, 204, 148, 163, 209, 231, 65, 21, 221, 73, 33]], [1, 1]),
    ([1, 22, 179, 5, 158, 207, 15, 210, 101, 224, 3, 145, 85, 126, 77, 223, 187, 149, 56, 46, 153, 150, 218], [[1, 136], [1, 201], [1, 163, 207], [1, 110, 34, 124, 98], [1, 63, 126, 36, 38, 53, 144, 2, 171, 28, 240, 196, 228, 198, 62]], [1, 1, 1, 1, 1]),
]

POLY_FACTORS_5_1 = [
    ([1, 1, 3, 4, 0, 3, 1, 1, 3, 1, 0, 4, 1, 0, 2], [[1, 4], [1, 1, 0, 4, 4, 2], [1, 1, 4, 1, 0, 0, 1, 1, 4]], [1, 1, 1]),
    ([1, 1, 0, 2, 0, 0, 0, 1, 0, 0, 4, 2, 1, 0, 3, 2, 2, 0, 2, 3, 3, 2, 1, 4, 4, 4, 2, 3, 2, 3, 0, 0, 3, 2], [[1, 0, 2, 3, 1], [1, 2, 2, 1, 4, 2, 1], [1, 2, 4, 1, 4, 4, 4, 0, 2], [1, 2, 0, 3, 0, 3, 4, 3, 3, 3, 4, 4, 0, 1, 4, 1]], [1, 1, 1, 1]),
    ([1, 2, 0, 0, 0, 3, 1, 1, 2, 4, 1, 4, 3, 2, 0, 2, 2, 4, 4, 4, 1, 0, 4, 3, 4, 0, 0, 2, 4, 3, 2, 3, 3, 0, 0, 4, 2], [[1, 2], [1, 3], [1, 4], [1, 2, 3], [1, 0, 2, 0, 0, 2, 2], [1, 3, 3, 2, 4, 3, 2, 0, 3, 3], [1, 3, 3, 1, 2, 0, 3, 4, 4, 1, 0, 0, 1, 2, 4, 2, 1]], [1, 1, 1, 1, 1, 1, 1]),
    ([1, 0, 2, 2, 4, 3, 0, 1, 3, 4, 0, 3, 2, 1, 3, 0, 3, 4, 2, 1], [[1, 0, 2, 2, 4, 3, 0, 1, 3, 4, 0, 3, 2, 1, 3, 0, 3, 4, 2, 1]], [1]),
    ([1, 4, 1, 0, 3, 4, 2, 0, 1, 4, 2, 0, 3, 2, 2], [[1, 4, 1, 0, 3, 4, 2, 0, 1, 4, 2, 0, 3, 2, 2]], [1]),
    ([1, 2, 0, 3, 2, 0, 3, 3, 0, 0, 3, 4, 2, 2, 4, 3, 1, 2, 0, 1, 1, 2, 3, 1, 1, 2, 2, 3, 1, 2, 2, 4, 0, 2, 0, 1, 1, 1], [[1, 4], [1, 2, 3, 4, 4, 0, 1, 2], [1, 1, 3, 3, 0, 3, 0, 0, 2, 4, 2, 4, 4, 1, 4, 1, 4, 1, 4, 1, 2, 3, 4, 0, 1, 2, 1, 2, 3, 2]], [1, 1, 1]),
    ([1, 1, 3, 2, 4, 1, 1, 2, 0, 2, 4, 1, 2, 0, 2, 3, 0, 4, 1, 2, 3], [[1, 2], [1, 3, 3], [1, 2, 0, 1, 3, 3, 3], [1, 4, 1, 4, 2, 4, 1, 3, 1, 2, 4, 1]], [1, 1, 1, 1]),
    ([1, 2, 2, 1, 3, 3, 3, 2, 4, 3, 3, 1, 0, 3, 2, 1, 0, 3, 2, 0], [[1, 0], [1, 4, 2], [1, 3, 3, 3, 0, 2, 0, 3, 2, 4, 3, 1, 0, 1, 3, 2, 1]], [1, 1, 1]),
    ([1, 4, 1, 3, 3, 3, 4, 2, 1, 3, 1], [[1, 4, 1, 3, 3, 3, 4, 2, 1, 3, 1]], [1]),
    ([1, 1, 4, 4, 2, 0, 4, 2, 0, 3, 0, 0, 0, 4, 4, 3, 3, 3, 2, 0, 3], [[1, 2, 1, 3], [1, 1, 3, 4, 4], [1, 0, 0, 2, 1, 2], [1, 3, 4, 3, 1, 2, 4, 3, 2]], [1, 1, 1, 1]),
    ([1, 4, 1, 2, 3, 0, 3, 3, 2, 3, 4, 0, 2, 1, 1, 0, 4, 4, 2, 3], [[1, 4, 2], [1, 3, 4, 1, 3, 4, 3, 4], [1, 2, 4, 0, 0, 0, 2, 3, 0, 0, 1]], [1, 1, 1]),
    ([1, 2, 1, 4, 4, 2, 2, 3, 4, 4, 1, 4, 4, 4, 4, 3, 2, 0, 2, 1, 3, 4, 4], [[1, 2, 1, 0, 2, 3], [1, 3, 0, 0, 3, 2, 4, 1], [1, 2, 4, 2, 0, 4, 2, 1, 0, 4, 3]], [1, 1, 1]),
    ([1, 2, 0, 4, 0, 4, 2, 3, 0, 3, 4, 0, 0, 2, 4, 0, 2, 1, 0, 2, 0, 4, 4, 0, 4, 0, 2, 2, 3, 4, 0], [[1, 0], [1, 1], [1, 2, 3, 0, 2, 2, 4], [1, 4, 3, 2, 0, 3, 4, 2, 3, 2, 4, 1, 1, 3, 0, 0, 0, 4, 1, 2, 0, 3, 1]], [1, 1, 1, 1]),
    ([1, 3, 0, 2, 0, 2, 2, 0, 3, 4, 4, 3, 2, 0, 0, 4, 1, 3, 1, 3, 2, 4, 3, 2, 3, 1, 2, 4, 3, 0, 3, 4], [[1, 2], [1, 3], [1, 0, 4, 1, 0, 2, 3, 0, 4, 0, 3, 1, 3], [1, 3, 0, 1, 3, 2, 4, 2, 3, 4, 2, 4, 4, 4, 2, 4, 0, 3]], [1, 1, 1, 1]),
    ([1, 4, 1, 4, 1, 4, 1, 3, 3, 2, 3, 0], [[1, 0], [1, 0, 0, 0, 2], [1, 4, 1, 4, 4, 1, 4]], [1, 1, 1]),
    ([1, 0, 2, 0, 3, 1, 4, 1, 1, 4, 1, 2, 0, 1, 3, 1, 4, 1, 1, 3, 0, 2, 4, 4, 3, 2, 2, 2, 2, 1, 1, 4, 1, 4, 0, 3, 1], [[1, 2], [1, 4], [1, 0, 4, 3, 0, 3], [1, 0, 2, 3, 3, 1, 1, 0, 4, 0, 0, 2, 4, 3], [1, 4, 4, 3, 1, 4, 4, 0, 3, 4, 1, 3, 2, 4, 1, 4, 3]], [1, 1, 1, 1, 1]),
    ([1, 3, 2, 0, 2, 0, 3, 0, 3, 4, 1, 1, 2, 0, 3, 1, 3, 1, 4, 4, 0], [[1, 0], [1, 1], [1, 3, 1, 0, 2], [1, 4, 4, 0, 1, 3], [1, 0, 3, 3, 3, 4, 4, 0, 2, 4]], [1, 1, 1, 1, 1]),
    ([1, 3, 3, 3, 1, 3, 1, 0, 2, 4, 1, 1, 0, 1, 3, 0, 4, 3, 2, 4, 2, 1, 2, 2, 1, 1, 0, 0, 4, 4, 2, 1, 4], [[1, 3, 4], [1, 0, 4, 1, 2, 3, 4, 1, 3, 1, 1, 4, 4, 3, 3, 4, 0, 2, 1, 3, 4, 2, 0, 4, 4, 3, 0, 3, 0, 2, 1]], [1, 1]),
    ([1, 1, 0, 4, 4, 2, 2, 4, 1, 1, 3, 0, 0, 0, 0, 2, 0, 2, 1], [[1, 4, 1], [1, 3, 1, 4, 3, 1, 2, 4, 4], [1, 4, 3, 1, 1, 1, 3, 3, 4]], [1, 1, 1]),
    ([1, 1, 4, 3, 0, 4, 3, 4, 1, 2, 2, 2, 0, 3, 2, 2, 2, 1, 3, 4, 4, 3, 1, 2, 3, 0, 3, 1, 2, 0, 3, 2, 0, 1, 0], [[1, 0], [1, 0, 3], [1, 2, 3], [1, 4, 4, 4], [1, 3, 0, 3, 2], [1, 2, 0, 2, 3, 3, 1, 0, 0, 4, 4, 2, 3, 4, 4, 4, 3, 0, 1, 4, 2, 3, 3]], [1, 1, 1, 1, 1, 1]),
]

POLY_FACTORS_5_4 = [
    ([1, 480, 299, 224, 231, 434, 83, 80, 137, 139, 323, 213, 410, 302, 187, 82, 411, 280, 318], [[1, 435, 223, 352], [1, 298, 346, 283, 611, 436, 13, 456], [1, 402, 454, 322, 260, 94, 108, 103, 57]], [1, 1, 1]),
    ([1, 455, 140, 322, 258, 111, 349, 564, 588, 466, 449, 515, 123], [[1, 453, 558, 235, 469, 571], [1, 7, 482, 491, 41, 333, 51, 422]], [1, 1]),
    ([1, 61, 616, 523, 361, 448, 69, 607, 86, 71, 519, 95, 280, 273, 96, 466, 268, 484, 11, 131, 419, 255, 541, 226, 121, 447, 233, 335, 289, 356, 295, 349], [[1, 616], [1, 446, 525, 353], [1, 429, 550, 196, 373, 237, 70, 315, 192, 384], [1, 100, 234, 423, 368, 392, 304, 474, 238, 422, 42, 265, 127, 423, 554, 554, 192, 571, 491]], [1, 1, 1, 1]),
    ([1, 604, 7, 486, 531, 343, 199, 23, 534, 132, 450, 348, 405, 329, 561, 53, 25, 379, 608, 116, 73, 607, 241, 145, 417, 139, 63, 291, 302, 386, 549, 368, 451], [[1, 604, 7, 486, 531, 343, 199, 23, 534, 132, 450, 348, 405, 329, 561, 53, 25, 379, 608, 116, 73, 607, 241, 145, 417, 139, 63, 291, 302, 386, 549, 368, 451]], [1]),
    ([1, 233, 547, 131, 454, 408, 182, 273, 531, 405, 526, 307, 582, 205, 101, 345, 458, 349, 33, 75, 440, 407, 297, 163, 354, 113, 437, 616, 412, 563], [[1, 598], [1, 285, 106, 350, 180, 514, 565, 353, 28, 447, 492, 457, 500, 169, 255, 615, 310, 34, 415, 393, 273, 612, 195, 413, 140, 198, 453, 403, 472]], [1, 1]),
    ([1, 407, 201, 373, 213, 312, 2, 57, 233, 180, 184, 334, 524, 482, 12, 222, 5, 260, 129, 249, 421, 92, 478, 70, 240, 470, 576, 610, 107, 195, 273, 492, 230, 159, 590, 107, 199, 272, 307], [[1, 289], [1, 365], [1, 151, 294, 150], [1, 483, 623, 591], [1, 498, 80, 167, 79, 220, 577, 499], [1, 306, 57, 76, 509, 396, 306, 293, 197, 176, 333, 275, 323, 59, 197, 340, 4, 329, 82, 68, 417, 328, 307, 430]], [1, 1, 1, 1, 1, 1]),
    ([1, 611, 483, 245, 31, 245, 549, 606, 429, 172, 106, 140, 332, 38, 40, 617, 597, 169, 16, 60, 211, 249, 105, 448, 280, 239, 562, 247, 312, 408, 195, 460, 157], [[1, 391], [1, 253, 30, 112], [1, 283, 33, 457, 548, 579, 506, 178, 395, 303, 362, 547, 124], [1, 344, 160, 542, 261, 125, 162, 227, 160, 384, 272, 31, 264, 496, 539, 516, 212]], [1, 1, 1, 1]),
    ([1, 588, 511, 21, 368, 435, 386, 331, 307, 203, 570, 394, 526, 132, 150], [[1, 123], [1, 615, 465, 79, 50, 96, 122, 27, 449, 206, 149, 20, 391, 378]], [1, 1]),
    ([1, 580, 570, 444, 161, 186, 317, 233, 55, 340, 68, 362, 85, 363], [[1, 226], [1, 516], [1, 514, 560, 61, 254, 56], [1, 109, 20, 365, 31, 318, 491]], [1, 1, 1, 1]),
    ([1, 241, 127, 216, 178, 133, 359, 72, 189, 619, 363, 588, 459, 49, 89, 451, 331, 578, 206, 267, 398, 489, 290, 268, 192, 177, 377, 69, 35, 416, 150, 406, 326, 240, 342, 41, 520, 305, 579, 472], [[1, 287, 208], [1, 584, 518, 188, 80, 414, 525, 416, 302, 521, 178, 545, 196, 545, 380, 124, 61, 413, 467, 228, 493, 36, 396, 298, 402, 307, 19, 219, 542, 164, 182, 215, 134, 17, 194, 67, 27, 620]], [1, 1]),
    ([1, 275, 563, 547, 49, 492, 244, 129, 40, 144, 442, 437, 274, 330, 478, 254, 141, 375, 605, 68, 564, 244, 323, 424, 153, 67, 238, 345, 468, 210, 4], [[1, 331], [1, 234, 396], [1, 329, 423, 559, 111], [1, 291, 290, 614, 472, 406, 507, 54, 368, 366, 385, 482, 449, 428, 316, 564, 231, 37, 592, 428, 504, 21, 34, 495]], [1, 1, 1, 1]),
    ([1, 64, 389, 505, 442, 462, 591, 408, 118, 223, 287, 45, 394, 1, 80, 20, 478, 412, 86, 531, 330, 376, 19, 120, 501, 562, 528, 357, 355, 75, 114, 430, 98, 490, 379, 361, 368, 32, 307, 113, 433], [[1, 92, 257, 400, 577], [1, 122, 302, 592, 238, 26, 175, 70, 470, 139, 482, 446, 457, 193, 228, 487, 185, 4, 151, 580, 237, 530, 242, 33, 541, 6, 75, 344, 398, 280, 324, 584, 412, 175, 177, 133, 82]], [1, 1]),
    ([1, 621, 223, 464, 179, 358, 439, 120, 167, 206, 616, 527, 478, 43, 208, 114, 549, 131, 304, 590, 52, 340, 46, 327, 345, 535, 142, 264, 503, 535], [[1, 21], [1, 36], [1, 76, 88], [1, 168, 149], [1, 488, 371], [1, 17, 256, 268, 406, 144, 68, 43, 402, 240, 235, 297, 278, 251, 127, 458, 267, 216, 320, 473, 60, 105]], [1, 1, 1, 1, 1, 1]),
    ([1, 170, 40, 522, 525, 338, 455, 44, 195, 174, 81, 51, 288, 413, 438, 54, 600, 440, 169, 404, 417, 499, 518, 48, 229, 424, 72, 477, 301, 525], [[1, 256], [1, 531], [1, 614], [1, 580, 563, 404, 96, 294], [1, 349, 386, 373, 440, 15, 247, 494, 548, 352, 613, 156, 264, 395, 217, 592, 393, 120, 288, 280, 261, 356]], [1, 1, 1, 1, 1]),
    ([1, 465, 493, 288, 157, 266, 112, 591, 286, 509, 561, 225, 579, 185, 149, 527, 150, 223, 561, 215, 194, 612, 107, 90, 473], [[1, 104], [1, 305, 609, 564], [1, 129, 391, 502, 544, 543, 334], [1, 401, 285, 31, 247, 118, 36], [1, 286, 114, 176, 4, 559, 496, 52, 353]], [1, 1, 1, 1, 1]),
    ([1, 624, 542, 31, 208, 60, 231, 508, 569, 84, 73, 365, 464, 327, 573, 459, 522, 457, 563, 341, 116], [[1, 380, 6, 449, 438], [1, 107, 198, 290, 307, 520, 365, 38], [1, 137, 432, 459, 58, 56, 305, 516, 342, 167]], [1, 1, 1]),
    ([1, 221, 610, 207, 118, 585, 381, 69, 127, 411, 421, 382, 533, 202, 180, 340, 459, 360, 121, 316, 409, 42, 577, 619, 15, 0, 446, 476], [[1, 200], [1, 8, 614, 320], [1, 18, 270, 218, 563, 65, 345, 612, 151, 345, 12, 594, 368, 260, 243, 403, 200, 441, 606, 453, 241, 248, 480, 67]], [1, 1, 1]),
    ([1, 500, 95, 301, 363, 383, 576, 156, 193, 244, 430, 66, 240, 409, 264, 600], [[1, 288], [1, 408], [1, 315, 426, 539, 613], [1, 514, 483, 46, 98], [1, 410, 161, 526, 293, 378]], [1, 1, 1, 1, 1]),
    ([1, 489, 396, 475, 62, 210, 118, 504, 533, 618, 368, 544], [[1, 92], [1, 422, 481, 385, 585, 207, 498, 25, 169, 302, 163]], [1, 1]),
    ([1, 371, 0, 602, 150, 582, 60, 317, 263, 617, 22, 559], [[1, 409], [1, 431], [1, 540, 501], [1, 191, 605, 342], [1, 205, 187, 279, 67]], [1, 1, 1, 1, 1]),
]


def test_poly_factors_exceptions():
    GF = galois.GF(5)
    with pytest.raises(TypeError):
        galois.poly_factors([1,0,2,4])
    with pytest.raises(ValueError):
        galois.poly_factors(galois.Poly([2,0,2,4], field=GF))
    with pytest.raises(ValueError):
        galois.poly_factors(galois.Poly([2], field=GF))


def test_poly_factors_old():
    g0, g1, g2 = galois.conway_poly(2, 3), galois.conway_poly(2, 4), galois.conway_poly(2, 5)
    k0, k1, k2 = 2, 3, 4
    f = g0**k0 * g1**k1 * g2**k2
    factors, multiplicities = galois.poly_factors(f)
    assert factors == [g0, g1, g2]
    assert multiplicities == [k0, k1, k2]

    g0, g1, g2 = galois.conway_poly(3, 3), galois.conway_poly(3, 4), galois.conway_poly(3, 5)
    g0, g1, g2
    k0, k1, k2 = 3, 4, 6
    f = g0**k0 * g1**k1 * g2**k2
    factors, multiplicities = galois.poly_factors(f)
    assert factors == [g0, g1, g2]
    assert multiplicities == [k0, k1, k2]


def test_poly_factors_random():
    for _ in range(5):
        f = galois.Poly.Random(random.randint(10, 50))
        factors, multiplicities = galois.poly_factors(f)
        g = galois.Poly.One()
        for fi, mi in zip(factors, multiplicities):
            g *= fi**mi
        assert f == g

    GF = galois.GF(5)
    for _ in range(5):
        f = galois.Poly.Random(random.randint(10, 50), field=GF)
        f /= f.coeffs[0]  # Make monic
        factors, multiplicities = galois.poly_factors(f)
        g = galois.Poly.One(GF)
        for fi, mi in zip(factors, multiplicities):
            g *= fi**mi
        assert f == g


# @pytest.mark.parametrize("characteristic,degree", [(2,1), (2,8), (3,1), (3,5), (5,1), (5,4)])
@pytest.mark.parametrize("characteristic,degree", [(2,1), (3,1), (5,1)])
def test_poly_factors(characteristic, degree):
    GF = galois.GF(characteristic**degree)
    LUT = eval(f"POLY_FACTORS_{characteristic}_{degree}")

    for item in LUT:
        a = galois.Poly(item[0], field=GF)
        factors = [galois.Poly(f, field=GF) for f in item[1]]
        multiplicities = item[2]

        # Sort the Sage output to be ordered similarly to `galois`
        factors, multiplicities = zip(*sorted(zip(factors, multiplicities), key=lambda item: item[0].integer))
        factors, multiplicities = list(factors), list(multiplicities)

        assert galois.poly_factors(a) == (factors, multiplicities)


def test_square_free_factorization_exceptions():
    GF = galois.GF(5)
    with pytest.raises(TypeError):
        galois.square_free_factorization([1,0,2,4])
    with pytest.raises(ValueError):
        galois.square_free_factorization(galois.Poly([2,0,2,4], field=GF))
    with pytest.raises(ValueError):
        galois.square_free_factorization(galois.Poly([2], field=GF))


def test_square_free_factorization():
    a = galois.irreducible_poly(2, 1, method="random")
    b = galois.irreducible_poly(2, 4, method="random")
    c = galois.irreducible_poly(2, 3, method="random")
    f = a * b * c**3
    assert galois.square_free_factorization(f) == ([a*b, c], [1, 3])

    a = galois.irreducible_poly(5, 1, method="random")
    b = galois.irreducible_poly(5, 4, method="random")
    c = galois.irreducible_poly(5, 3, method="random")
    f = a * b * c**3
    assert galois.square_free_factorization(f) == ([a*b, c], [1, 3])

    a = galois.irreducible_poly(2**2, 1, method="random")
    b = galois.irreducible_poly(2**2, 4, method="random")
    c = galois.irreducible_poly(2**2, 3, method="random")
    f = a * b * c**3
    assert galois.square_free_factorization(f) == ([a*b, c], [1, 3])

    a = galois.irreducible_poly(5**2, 1, method="random")
    b = galois.irreducible_poly(5**2, 4, method="random")
    c = galois.irreducible_poly(5**2, 3, method="random")
    f = a * b * c**3
    assert galois.square_free_factorization(f) == ([a*b, c], [1, 3])


def test_square_free_factorization_random():
    GF = galois.GF(2)
    f = galois.Poly.Random(10, field=GF)
    f /= f.coeffs[0] # Make monic
    factors, multiplicities = galois.square_free_factorization(f)
    g = galois.Poly.One(GF)
    for fi, mi in zip(factors, multiplicities):
        g *= fi**mi
    assert f == g

    GF = galois.GF(5)
    f = galois.Poly.Random(10, field=GF)
    f /= f.coeffs[0] # Make monic
    factors, multiplicities = galois.square_free_factorization(f)
    g = galois.Poly.One(GF)
    for fi, mi in zip(factors, multiplicities):
        g *= fi**mi
    assert f == g

    GF = galois.GF(2**2)
    f = galois.Poly.Random(10, field=GF)
    f /= f.coeffs[0] # Make monic
    factors, multiplicities = galois.square_free_factorization(f)
    g = galois.Poly.One(GF)
    for fi, mi in zip(factors, multiplicities):
        g *= fi**mi
    assert f == g

    GF = galois.GF(5**2)
    f = galois.Poly.Random(10, field=GF)
    f /= f.coeffs[0] # Make monic
    factors, multiplicities = galois.square_free_factorization(f)
    g = galois.Poly.One(GF)
    for fi, mi in zip(factors, multiplicities):
        g *= fi**mi
    assert f == g


def test_distinct_degree_factorization_exceptions():
    GF = galois.GF(5)
    with pytest.raises(TypeError):
        galois.distinct_degree_factorization([1,0,2,4])
    with pytest.raises(ValueError):
        galois.distinct_degree_factorization(galois.Poly([2,0,2,4], field=GF))
    with pytest.raises(ValueError):
        galois.distinct_degree_factorization(galois.Poly([2], field=GF))


def test_distinct_degree_factorization():
    GF = galois.GF(2)
    factors_1 = random.sample(galois.irreducible_polys(2, 1), random.randint(1, 2))
    factors_3 = random.sample(galois.irreducible_polys(2, 3), random.randint(1, 2))
    factors_4 = random.sample(galois.irreducible_polys(2, 4), random.randint(1, 3))
    f1 = galois.Poly.One(GF)
    for f in factors_1:
        f1 *= f
    f3 = galois.Poly.One(GF)
    for f in factors_3:
        f3 *= f
    f4 = galois.Poly.One(GF)
    for f in factors_4:
        f4 *= f
    f = f1 * f3 * f4
    assert galois.distinct_degree_factorization(f) == ([f1, f3, f4], [1, 3, 4])

    GF = galois.GF(5)
    factors_1 = random.sample(galois.irreducible_polys(5, 1), random.randint(1, 5))
    factors_3 = random.sample(galois.irreducible_polys(5, 3), random.randint(1, 5))
    factors_4 = random.sample(galois.irreducible_polys(5, 4), random.randint(1, 5))
    f1 = galois.Poly.One(GF)
    for f in factors_1:
        f1 *= f
    f3 = galois.Poly.One(GF)
    for f in factors_3:
        f3 *= f
    f4 = galois.Poly.One(GF)
    for f in factors_4:
        f4 *= f
    f = f1 * f3 * f4
    assert galois.distinct_degree_factorization(f) == ([f1, f3, f4], [1, 3, 4])


def test_equal_degree_factorization_exceptions():
    GF = galois.GF(5)
    a = galois.Poly([1,0,2,1], field=GF)
    b = galois.Poly([1,4,4,4], field=GF)
    f = a * b

    with pytest.raises(TypeError):
        galois.equal_degree_factorization(f.coeffs, 2)
    with pytest.raises(TypeError):
        galois.equal_degree_factorization(f, 2.0)
    with pytest.raises(ValueError):
        galois.equal_degree_factorization(galois.Poly([2], field=GF), 1)
    with pytest.raises(ValueError):
        galois.equal_degree_factorization(galois.Poly([2,0,2,4], field=GF), 2)
    with pytest.raises(ValueError):
        galois.equal_degree_factorization(f, 4)


def test_equal_degree_factorization():
    GF = galois.GF(2)
    for d in range(1, 4):
        polys = galois.irreducible_polys(2, d)
        r = random.randint(1, len(polys))
        factors = random.sample(polys, r)
        factors = sorted(factors, key=lambda item: item.integer)
    f = galois.Poly.One(GF)
    for factor in factors:
        f *= factor
    assert galois.equal_degree_factorization(f, d) == factors

    GF = galois.GF(5)
    for d in range(1, 4):
        polys = galois.irreducible_polys(5, d)
        r = random.randint(1, len(polys))
        factors = random.sample(polys, r)
        factors = sorted(factors, key=lambda item: item.integer)
    f = galois.Poly.One(GF)
    for factor in factors:
        f *= factor
    assert galois.equal_degree_factorization(f, d) == factors
