"""
A pytest module to test generating minimal polynomials of finite field elements.

Sage:
    PARAMS = [(2,1), (2,2), (2,3), (2,4), (3,1), (3,2), (3,3), (3,4), (5,1), (5,2), (5,3)]
    for p, m in PARAMS:
        print(f"MINIMAL_POLYS_{p}_{m} = [")
        F.<x> = GF(p**m)
        for i in range(0, F.order()):
            e = F(i) if m == 1 else F.fetch_int(i)
            c = e.minpoly().coefficients(sparse=False)[::-1]
            print(f"    ({i}, {c}),",)
        print("]\n")
"""
import pytest
import numpy as np

import galois

PARAMS = [(2,1), (2,2), (2,3), (2,4), (3,1), (3,2), (3,3), (3,4), (5,1), (5,2), (5,3)]

# LUT items are (field element as an integer, poly coefficients in degree-descending order)

MINIMAL_POLYS_2_1 = [
    (0, [1, 0]),
    (1, [1, 1]),
]

MINIMAL_POLYS_2_2 = [
    (0, [1, 0]),
    (1, [1, 1]),
    (2, [1, 1, 1]),
    (3, [1, 1, 1]),
]

MINIMAL_POLYS_2_3 = [
    (0, [1, 0]),
    (1, [1, 1]),
    (2, [1, 0, 1, 1]),
    (3, [1, 1, 0, 1]),
    (4, [1, 0, 1, 1]),
    (5, [1, 1, 0, 1]),
    (6, [1, 0, 1, 1]),
    (7, [1, 1, 0, 1]),
]

MINIMAL_POLYS_2_4 = [
    (0, [1, 0]),
    (1, [1, 1]),
    (2, [1, 0, 0, 1, 1]),
    (3, [1, 0, 0, 1, 1]),
    (4, [1, 0, 0, 1, 1]),
    (5, [1, 0, 0, 1, 1]),
    (6, [1, 1, 1]),
    (7, [1, 1, 1]),
    (8, [1, 1, 1, 1, 1]),
    (9, [1, 1, 0, 0, 1]),
    (10, [1, 1, 1, 1, 1]),
    (11, [1, 1, 0, 0, 1]),
    (12, [1, 1, 1, 1, 1]),
    (13, [1, 1, 0, 0, 1]),
    (14, [1, 1, 0, 0, 1]),
    (15, [1, 1, 1, 1, 1]),
]

MINIMAL_POLYS_3_1 = [
    (0, [1, 0]),
    (1, [1, 2]),
    (2, [1, 1]),
]

MINIMAL_POLYS_3_2 = [
    (0, [1, 0]),
    (1, [1, 2]),
    (2, [1, 1]),
    (3, [1, 2, 2]),
    (4, [1, 0, 1]),
    (5, [1, 1, 2]),
    (6, [1, 1, 2]),
    (7, [1, 2, 2]),
    (8, [1, 0, 1]),
]

MINIMAL_POLYS_3_3 = [
    (0, [1, 0]),
    (1, [1, 2]),
    (2, [1, 1]),
    (3, [1, 0, 2, 1]),
    (4, [1, 0, 2, 1]),
    (5, [1, 0, 2, 1]),
    (6, [1, 0, 2, 2]),
    (7, [1, 0, 2, 2]),
    (8, [1, 0, 2, 2]),
    (9, [1, 1, 1, 2]),
    (10, [1, 1, 2, 1]),
    (11, [1, 1, 0, 2]),
    (12, [1, 1, 0, 2]),
    (13, [1, 1, 1, 2]),
    (14, [1, 1, 2, 1]),
    (15, [1, 1, 0, 2]),
    (16, [1, 1, 1, 2]),
    (17, [1, 1, 2, 1]),
    (18, [1, 2, 1, 1]),
    (19, [1, 2, 0, 1]),
    (20, [1, 2, 2, 2]),
    (21, [1, 2, 0, 1]),
    (22, [1, 2, 2, 2]),
    (23, [1, 2, 1, 1]),
    (24, [1, 2, 0, 1]),
    (25, [1, 2, 2, 2]),
    (26, [1, 2, 1, 1]),
]

MINIMAL_POLYS_3_4 = [
    (0, [1, 0]),
    (1, [1, 2]),
    (2, [1, 1]),
    (3, [1, 2, 0, 0, 2]),
    (4, [1, 1, 0, 2, 1]),
    (5, [1, 0, 0, 1, 2]),
    (6, [1, 1, 0, 0, 2]),
    (7, [1, 0, 0, 2, 2]),
    (8, [1, 2, 0, 1, 1]),
    (9, [1, 2, 1, 0, 1]),
    (10, [1, 1, 1, 0, 1]),
    (11, [1, 0, 1, 0, 2]),
    (12, [1, 1, 1, 2, 2]),
    (13, [1, 0, 1, 2, 1]),
    (14, [1, 2, 1, 2, 1]),
    (15, [1, 0, 1, 2, 1]),
    (16, [1, 2, 1, 2, 1]),
    (17, [1, 1, 1, 2, 2]),
    (18, [1, 1, 1, 0, 1]),
    (19, [1, 0, 1, 0, 2]),
    (20, [1, 2, 1, 0, 1]),
    (21, [1, 0, 1, 1, 1]),
    (22, [1, 2, 1, 1, 2]),
    (23, [1, 1, 1, 1, 1]),
    (24, [1, 2, 1, 1, 2]),
    (25, [1, 1, 1, 1, 1]),
    (26, [1, 0, 1, 1, 1]),
    (27, [1, 2, 0, 0, 2]),
    (28, [1, 1, 0, 2, 1]),
    (29, [1, 0, 0, 1, 2]),
    (30, [1, 1, 2, 2, 2]),
    (31, [1, 0, 2, 0, 2]),
    (32, [1, 2, 2, 1, 2]),
    (33, [1, 0, 1, 2, 1]),
    (34, [1, 2, 1, 2, 1]),
    (35, [1, 1, 1, 2, 2]),
    (36, [1, 2, 2]),
    (37, [1, 0, 1]),
    (38, [1, 1, 2]),
    (39, [1, 0, 1, 0, 2]),
    (40, [1, 2, 1, 0, 1]),
    (41, [1, 1, 1, 0, 1]),
    (42, [1, 2, 0, 0, 2]),
    (43, [1, 1, 0, 2, 1]),
    (44, [1, 0, 0, 1, 2]),
    (45, [1, 0, 0, 1, 2]),
    (46, [1, 2, 0, 0, 2]),
    (47, [1, 1, 0, 2, 1]),
    (48, [1, 2, 2, 1, 2]),
    (49, [1, 1, 2, 2, 2]),
    (50, [1, 0, 2, 0, 2]),
    (51, [1, 1, 1, 1, 1]),
    (52, [1, 0, 1, 1, 1]),
    (53, [1, 2, 1, 1, 2]),
    (54, [1, 1, 0, 0, 2]),
    (55, [1, 0, 0, 2, 2]),
    (56, [1, 2, 0, 1, 1]),
    (57, [1, 0, 1, 1, 1]),
    (58, [1, 2, 1, 1, 2]),
    (59, [1, 1, 1, 1, 1]),
    (60, [1, 2, 2, 1, 2]),
    (61, [1, 1, 2, 2, 2]),
    (62, [1, 0, 2, 0, 2]),
    (63, [1, 0, 0, 2, 2]),
    (64, [1, 2, 0, 1, 1]),
    (65, [1, 1, 0, 0, 2]),
    (66, [1, 2, 1, 2, 1]),
    (67, [1, 1, 1, 2, 2]),
    (68, [1, 0, 1, 2, 1]),
    (69, [1, 1, 2, 2, 2]),
    (70, [1, 0, 2, 0, 2]),
    (71, [1, 2, 2, 1, 2]),
    (72, [1, 1, 2]),
    (73, [1, 2, 2]),
    (74, [1, 0, 1]),
    (75, [1, 1, 0, 0, 2]),
    (76, [1, 0, 0, 2, 2]),
    (77, [1, 2, 0, 1, 1]),
    (78, [1, 0, 1, 0, 2]),
    (79, [1, 2, 1, 0, 1]),
    (80, [1, 1, 1, 0, 1]),
]

MINIMAL_POLYS_5_1 = [
    (0, [1, 0]),
    (1, [1, 4]),
    (2, [1, 3]),
    (3, [1, 2]),
    (4, [1, 1]),
]

MINIMAL_POLYS_5_2 = [
    (0, [1, 0]),
    (1, [1, 4]),
    (2, [1, 3]),
    (3, [1, 2]),
    (4, [1, 1]),
    (5, [1, 4, 2]),
    (6, [1, 2, 4]),
    (7, [1, 0, 3]),
    (8, [1, 3, 4]),
    (9, [1, 1, 2]),
    (10, [1, 3, 3]),
    (11, [1, 1, 1]),
    (12, [1, 4, 1]),
    (13, [1, 2, 3]),
    (14, [1, 0, 2]),
    (15, [1, 2, 3]),
    (16, [1, 0, 2]),
    (17, [1, 3, 3]),
    (18, [1, 1, 1]),
    (19, [1, 4, 1]),
    (20, [1, 1, 2]),
    (21, [1, 4, 2]),
    (22, [1, 2, 4]),
    (23, [1, 0, 3]),
    (24, [1, 3, 4]),
]

MINIMAL_POLYS_5_3 = [
    (0, [1, 0]),
    (1, [1, 4]),
    (2, [1, 3]),
    (3, [1, 2]),
    (4, [1, 1]),
    (5, [1, 0, 3, 3]),
    (6, [1, 2, 1, 4]),
    (7, [1, 4, 0, 4]),
    (8, [1, 1, 0, 2]),
    (9, [1, 3, 1, 2]),
    (10, [1, 0, 2, 4]),
    (11, [1, 2, 0, 1]),
    (12, [1, 4, 4, 2]),
    (13, [1, 1, 4, 1]),
    (14, [1, 3, 0, 2]),
    (15, [1, 0, 2, 1]),
    (16, [1, 2, 0, 3]),
    (17, [1, 4, 4, 4]),
    (18, [1, 1, 4, 3]),
    (19, [1, 3, 0, 4]),
    (20, [1, 0, 3, 2]),
    (21, [1, 2, 1, 3]),
    (22, [1, 4, 0, 3]),
    (23, [1, 1, 0, 1]),
    (24, [1, 3, 1, 1]),
    (25, [1, 1, 4, 1]),
    (26, [1, 3, 0, 2]),
    (27, [1, 0, 2, 4]),
    (28, [1, 2, 0, 1]),
    (29, [1, 4, 4, 2]),
    (30, [1, 1, 1, 3]),
    (31, [1, 3, 2, 2]),
    (32, [1, 0, 4, 2]),
    (33, [1, 2, 2, 2]),
    (34, [1, 4, 1, 1]),
    (35, [1, 1, 4, 3]),
    (36, [1, 3, 0, 4]),
    (37, [1, 0, 2, 1]),
    (38, [1, 2, 0, 3]),
    (39, [1, 4, 4, 4]),
    (40, [1, 1, 3, 4]),
    (41, [1, 3, 4, 1]),
    (42, [1, 0, 1, 4]),
    (43, [1, 2, 4, 2]),
    (44, [1, 4, 3, 4]),
    (45, [1, 1, 3, 4]),
    (46, [1, 3, 4, 1]),
    (47, [1, 0, 1, 4]),
    (48, [1, 2, 4, 2]),
    (49, [1, 4, 3, 4]),
    (50, [1, 2, 1, 3]),
    (51, [1, 4, 0, 3]),
    (52, [1, 1, 0, 1]),
    (53, [1, 3, 1, 1]),
    (54, [1, 0, 3, 2]),
    (55, [1, 2, 2, 2]),
    (56, [1, 4, 1, 1]),
    (57, [1, 1, 1, 3]),
    (58, [1, 3, 2, 2]),
    (59, [1, 0, 4, 2]),
    (60, [1, 2, 4, 4]),
    (61, [1, 4, 3, 1]),
    (62, [1, 1, 3, 1]),
    (63, [1, 3, 4, 3]),
    (64, [1, 0, 1, 1]),
    (65, [1, 2, 2, 2]),
    (66, [1, 4, 1, 1]),
    (67, [1, 1, 1, 3]),
    (68, [1, 3, 2, 2]),
    (69, [1, 0, 4, 2]),
    (70, [1, 2, 1, 4]),
    (71, [1, 4, 0, 4]),
    (72, [1, 1, 0, 2]),
    (73, [1, 3, 1, 2]),
    (74, [1, 0, 3, 3]),
    (75, [1, 3, 1, 2]),
    (76, [1, 0, 3, 3]),
    (77, [1, 2, 1, 4]),
    (78, [1, 4, 0, 4]),
    (79, [1, 1, 0, 2]),
    (80, [1, 3, 1, 1]),
    (81, [1, 0, 3, 2]),
    (82, [1, 2, 1, 3]),
    (83, [1, 4, 0, 3]),
    (84, [1, 1, 0, 1]),
    (85, [1, 3, 2, 3]),
    (86, [1, 0, 4, 3]),
    (87, [1, 2, 2, 3]),
    (88, [1, 4, 1, 2]),
    (89, [1, 1, 1, 4]),
    (90, [1, 3, 4, 1]),
    (91, [1, 0, 1, 4]),
    (92, [1, 2, 4, 2]),
    (93, [1, 4, 3, 4]),
    (94, [1, 1, 3, 4]),
    (95, [1, 3, 2, 3]),
    (96, [1, 0, 4, 3]),
    (97, [1, 2, 2, 3]),
    (98, [1, 4, 1, 2]),
    (99, [1, 1, 1, 4]),
    (100, [1, 4, 4, 4]),
    (101, [1, 1, 4, 3]),
    (102, [1, 3, 0, 4]),
    (103, [1, 0, 2, 1]),
    (104, [1, 2, 0, 3]),
    (105, [1, 4, 3, 1]),
    (106, [1, 1, 3, 1]),
    (107, [1, 3, 4, 3]),
    (108, [1, 0, 1, 1]),
    (109, [1, 2, 4, 4]),
    (110, [1, 4, 3, 1]),
    (111, [1, 1, 3, 1]),
    (112, [1, 3, 4, 3]),
    (113, [1, 0, 1, 1]),
    (114, [1, 2, 4, 4]),
    (115, [1, 4, 4, 2]),
    (116, [1, 1, 4, 1]),
    (117, [1, 3, 0, 2]),
    (118, [1, 0, 2, 4]),
    (119, [1, 2, 0, 1]),
    (120, [1, 4, 1, 2]),
    (121, [1, 1, 1, 4]),
    (122, [1, 3, 2, 3]),
    (123, [1, 0, 4, 3]),
    (124, [1, 2, 2, 3]),
]


def test_exceptions():
    GF = galois.GF(2**8)
    with pytest.raises(ValueError):
        A = GF.Random(5)
        A.minimal_poly()


@pytest.mark.parametrize("characteristic,degree", PARAMS)
def test_fields(characteristic, degree):
    GFp = galois.GF(characteristic)
    GFpm = galois.GF(characteristic**degree)
    LUT = eval(f"MINIMAL_POLYS_{characteristic}_{degree}")
    for item in LUT:
        a = GFpm(item[0])
        poly = galois.Poly(item[1], field=GFp)
        assert a.minimal_poly() == poly


def test_large_field():
    # Test vectors generated with SageMath
    GF = galois.GF(2**100)
    GF(2).minimal_poly() == galois.Poly.String("x^100 + x^57 + x^56 + x^55 + x^52 + x^48 + x^47 + x^46 + x^45 + x^44 + x^43 + x^41 + x^37 + x^36 + x^35 + x^34 + x^31 + x^30 + x^27 + x^25 + x^24 + x^22 + x^20 + x^19 + x^16 + x^15 + x^11 + x^9 + x^8 + x^6 + x^5 + x^3 + 1")
    GF(3).minimal_poly() == galois.Poly.String("x^100 + x^96 + x^68 + x^64 + x^57 + x^55 + x^54 + x^53 + x^51 + x^50 + x^48 + x^47 + x^42 + x^41 + x^38 + x^36 + x^31 + x^29 + x^26 + x^24 + x^15 + x^14 + x^12 + x^9 + x^8 + x^5 + x^2 + x + 1")
    GF(6).minimal_poly() == galois.Poly.String("x^100 + x^78 + x^76 + x^74 + x^73 + x^71 + x^67 + x^66 + x^65 + x^62 + x^60 + x^55 + x^52 + x^51 + x^50 + x^48 + x^47 + x^45 + x^42 + x^41 + x^35 + x^34 + x^33 + x^31 + x^30 + x^29 + x^28 + x^27 + x^26 + x^23 + x^22 + x^21 + x^20 + x^19 + x^16 + x^14 + x^13 + x^12 + x^10 + x^9 + x^8 + x^6 + x^3 + x + 1")
