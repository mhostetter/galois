"""
A pytest module to test number theoretic functions.
"""
import pytest
import numpy as np

import galois


def test_euler_phi_exceptions():
    with pytest.raises(TypeError):
        galois.euler_phi(20.0)
    with pytest.raises(ValueError):
        galois.euler_phi(-1)


def test_euler_phi():
    # https://oeis.org/A000010
    N = list(range(1,70))
    PHI = [1,1,2,2,4,2,6,4,6,4,10,4,12,6,8,8,16,6,18,8,12,10,22,8,20,12,18,12,28,8,30,16,20,16,24,12,36,18,24,16,40,12,42,20,24,22,46,16,42,20,32,24,52,18,40,24,36,28,58,16,60,30,36,32,48,20,66,32,44]
    for n, phi in zip(N, PHI):
        assert galois.euler_phi(n) == phi


def test_totatives_exceptions():
    with pytest.raises(TypeError):
        galois.totatives(20.0)
    with pytest.raises(ValueError):
        galois.totatives(-1)


def test_totatives():
    # https://oeis.org/A000010
    N = list(range(1,70))
    PHI = [1,1,2,2,4,2,6,4,6,4,10,4,12,6,8,8,16,6,18,8,12,10,22,8,20,12,18,12,28,8,30,16,20,16,24,12,36,18,24,16,40,12,42,20,24,22,46,16,42,20,32,24,52,18,40,24,36,28,58,16,60,30,36,32,48,20,66,32,44]
    for n, phi in zip(N, PHI):
        assert len(galois.totatives(n)) == phi


def test_crt_exceptions():
    with pytest.raises(TypeError):
        galois.crt(np.array([0, 3, 4]), [3, 4, 5])
    with pytest.raises(TypeError):
        galois.crt([0, 3, 4], np.array([3, 4, 5]))
    with pytest.raises(TypeError):
        galois.crt([0, 3.0, 4], [3, 4, 5])
    with pytest.raises(TypeError):
        galois.crt([0, 3, 4], [3, 4.0, 5])
    with pytest.raises(ValueError):
        galois.crt([0, 3, 4], [3, 4, 5, 7])
    with pytest.raises(ValueError):
        galois.crt([0, 3, 4], [3, 4, 6])


def test_crt():
    """
    Sage:
        lut = []
        for _ in range(20):
            N = randint(2, 6)
            a = [randint(0, 1_000) for _ in range(N)]
            m = []
            while len(m) < N:
                mi = next_prime(randint(0, 1_000))
                if mi not in m:
                    m.append(mi)
            x = crt(a, m)
            lut.append((a, m, x))
        print(lut)
    """
    LUT = [([975, 426, 300, 372, 596, 856], [457, 331, 521, 701, 71, 907], 1139408681764819), ([85, 653, 323, 655], [331, 479, 601, 191], 10711106463), ([589, 538, 501], [347, 541, 947], 155375738), ([788, 821, 414], [673, 331, 149], 20497003), ([269, 703, 436, 641, 616], [929, 293, 541, 467, 853], 39214084831996), ([270, 190], [173, 277], 15148), ([518, 809, 857, 118], [349, 821, 937, 157], 38154123633), ([711, 735, 1000, 426, 522], [149, 281, 293, 97, 37], 43994914384), ([104, 722, 168, 478], [193, 977, 211, 607], 23841886088), ([64, 160, 626, 702, 883], [877, 907, 251, 307, 839], 6612150797141), ([428, 570, 418, 346, 436], [467, 541, 373, 907, 179], 14825927170624), ([904, 14, 690, 585], [577, 907, 223, 967], 1713097171), ([238, 213, 368, 909, 455, 995], [137, 359, 947, 463, 937, 113], 1425637682359276), ([624, 95, 467, 472, 447, 849], [439, 79, 757, 269, 449, 293], 358511203165372), ([692, 245, 191, 101, 992, 267], [197, 367, 419, 139, 233, 593], 528226613934229), ([767, 794, 410], [331, 727, 359], 35029835), ([938, 992], [547, 17], 1485), ([337, 286, 308, 602, 386, 855], [67, 241, 167, 113, 211, 659], 36856037086592), ([681, 418], [997, 739], 630785), ([897, 343, 555, 245], [701, 89, 827, 379], 10082200693)]
    for item in LUT:
        a, m, x = item
        assert galois.crt(a, m) == x


def test_carmichael_lambda_exceptions():
    with pytest.raises(TypeError):
        galois.carmichael_lambda(20.0)
    with pytest.raises(ValueError):
        galois.carmichael_lambda(-1)


def test_carmichael_lambda():
    # https://oeis.org/A002322
    N = list(range(1,82))
    LAMBDA = [1,1,2,2,4,2,6,2,6,4,10,2,12,6,4,4,16,6,18,4,6,10,22,2,20,12,18,6,28,4,30,8,10,16,12,6,36,18,12,4,40,6,42,10,12,22,46,4,42,20,16,12,52,18,20,6,18,28,58,4,60,30,6,16,12,10,66,16,22,12,70,6,72,36,20,18,30,12,78,4,54]
    for n, lambda_ in zip(N, LAMBDA):
        assert galois.carmichael_lambda(n) == lambda_


def test_legendre_symbol_exceptions():
    with pytest.raises(TypeError):
        galois.legendre_symbol(3.0, 7)
    with pytest.raises(TypeError):
        galois.legendre_symbol(3, 7.0)
    with pytest.raises(ValueError):
        galois.legendre_symbol(3, 4)
    with pytest.raises(ValueError):
        galois.legendre_symbol(3, 2)


def test_legendre_symbol():
    # https://oeis.org/A102283
    assert [galois.legendre_symbol(n, 3) for n in range(0, 105)] == [0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1]
    # https://oeis.org/A080891
    assert [galois.legendre_symbol(n, 5) for n in range(0, 101)] == [0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0]
    # https://oeis.org/A175629
    assert [galois.legendre_symbol(n, 7) for n in range(0, 87)] == [0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1]
    # https://oeis.org/A011582
    assert [galois.legendre_symbol(n, 11) for n in range(0, 81)] == [0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1]
    # https://oeis.org/A011583
    assert [galois.legendre_symbol(n, 13) for n in range(0, 81)] == [0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1]
    # ...
    # https://oeis.org/A165573
    assert [galois.legendre_symbol(n, 257) for n in range(0, 82)] == [0,1,1,-1,1,-1,-1,-1,1,1,-1,1,-1,1,-1,1,1,1,1,-1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,1,-1,1,-1,1,-1,-1,1,1,-1,1,-1,-1,-1,-1,1,1,1,1,1,1,-1,1,-1,-1,1,1,-1,1,-1,1,1,-1,-1,-1,-1,-1,1,-1,1]
    # https://oeis.org/A165574
    assert [galois.legendre_symbol(n, 263) for n in range(0, 84)] == [0,1,1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,-1,1,-1,-1,-1,1,1,-1,1,-1,1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,1,1,1,-1,1,-1,1,1,-1,-1,1,-1,-1,1,-1,1]


def test_jacobi_symbol_exceptions():
    with pytest.raises(TypeError):
        galois.jacobi_symbol(3.0, 7)
    with pytest.raises(TypeError):
        galois.jacobi_symbol(3, 7.0)
    with pytest.raises(ValueError):
        galois.jacobi_symbol(3, 4)
    with pytest.raises(ValueError):
        galois.jacobi_symbol(3, 1)


def test_jacobi_symbol():
    # https://oeis.org/A102283
    assert [galois.jacobi_symbol(n, 3) for n in range(0, 105)] == [0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1]
    # https://oeis.org/A080891
    assert [galois.jacobi_symbol(n, 5) for n in range(0, 101)] == [0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0]
    # https://oeis.org/A175629
    assert [galois.jacobi_symbol(n, 7) for n in range(0, 87)] == [0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1]
    # https://oeis.org/A011582
    assert [galois.jacobi_symbol(n, 11) for n in range(0, 81)] == [0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1]
    # https://oeis.org/A011583
    assert [galois.jacobi_symbol(n, 13) for n in range(0, 81)] == [0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1]

    # https://oeis.org/A102283
    assert [galois.jacobi_symbol(n, 15) for n in range(0, 76)] == [0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0]
    # https://oeis.org/A322829
    assert [galois.jacobi_symbol(n, 21) for n in range(0, 85)] == [0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0]


def test_kronecker_symbol_exceptions():
    with pytest.raises(TypeError):
        galois.kronecker_symbol(3.0, 7)
    with pytest.raises(TypeError):
        galois.kronecker_symbol(3, 7.0)


def test_kronecker_symbol():
    # https://oeis.org/A102283
    assert [galois.kronecker_symbol(n, 3) for n in range(0, 105)] == [0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1]
    # https://oeis.org/A080891
    assert [galois.kronecker_symbol(n, 5) for n in range(0, 101)] == [0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0]
    # https://oeis.org/A175629
    assert [galois.kronecker_symbol(n, 7) for n in range(0, 87)] == [0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1]
    # https://oeis.org/A011582
    assert [galois.kronecker_symbol(n, 11) for n in range(0, 81)] == [0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1]
    # https://oeis.org/A011583
    assert [galois.kronecker_symbol(n, 13) for n in range(0, 81)] == [0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1]

    # https://oeis.org/A102283
    assert [galois.kronecker_symbol(n, 15) for n in range(0, 76)] == [0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0]
    # https://oeis.org/A322829
    assert [galois.kronecker_symbol(n, 21) for n in range(0, 85)] == [0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0]

    # https://oeis.org/A289741
    assert [galois.kronecker_symbol(-20, n) for n in range(0, 81)] == [0,1,0,1,0,0,0,1,0,1,0,-1,0,-1,0,0,0,-1,0,-1,0,1,0,1,0,0,0,1,0,1,0,-1,0,-1,0,0,0,-1,0,-1,0,1,0,1,0,0,0,1,0,1,0,-1,0,-1,0,0,0,-1,0,-1,0,1,0,1,0,0,0,1,0,1,0,-1,0,-1,0,0,0,-1,0,-1,0]
    # https://oeis.org/A226162
    assert [galois.kronecker_symbol(-5, n) for n in range(0, 90)] == [0,1,-1,1,1,0,-1,1,-1,1,0,-1,1,-1,-1,0,1,-1,-1,-1,0,1,1,1,-1,0,1,1,1,1,0,-1,-1,-1,1,0,1,-1,1,-1,0,1,-1,1,-1,0,-1,1,1,1,0,-1,-1,-1,-1,0,-1,-1,-1,-1,0,1,1,1,1,0,1,1,-1,1,0,-1,-1,-1,1,0,-1,-1,1,-1,0,1,-1,1,1,0,-1,1,1,1]
    # https://oeis.org/A034947
    assert [galois.kronecker_symbol(-1, n) for n in range(1, 82)] == [1,1,-1,1,1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,1,1,-1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,1]
    # https://oeis.org/A091337
    assert [galois.kronecker_symbol(2, n) for n in range(1, 106)] == [1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1]
    # https://oeis.org/A091338
    assert [galois.kronecker_symbol(3, n) for n in range(1, 103)] == [1,-1,0,1,-1,0,-1,-1,0,1,1,0,1,1,0,1,-1,0,-1,-1,0,-1,1,0,1,-1,0,-1,-1,0,-1,-1,0,1,1,0,1,1,0,1,-1,0,-1,1,0,-1,1,0,1,-1,0,1,-1,0,-1,1,0,1,1,0,1,1,0,1,-1,0,-1,-1,0,-1,1,0,1,-1,0,-1,-1,0,-1,-1,0,1,1,0,1,1,0,-1,-1,0,-1,1,0,-1,1,0,1,-1,0,1,-1,0]
    # https://oeis.org/A322796
    assert [galois.kronecker_symbol(6, n) for n in range(0, 85)] == [0,1,0,0,0,1,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,1,0,0,0,1,0,1,0,0,0,1,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,1,0,0,0,1,0,1,0,0,0,1,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,1,0,0,0,1,0,1,0,0,0,1,0,-1,0,0,0,-1,0]
    # https://oeis.org/A089509
    assert [galois.kronecker_symbol(7, n) for n in range(1, 107)] == [1,1,1,1,-1,1,0,1,1,-1,-1,1,-1,0,-1,1,-1,1,1,-1,0,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,0,1,1,1,-1,-1,-1,0,-1,-1,-1,-1,1,1,0,1,-1,-1,1,1,1,0,1,1,1,-1,-1,1,0,1,1,-1,-1,-1,-1,0,-1,1,-1,1,1,1,0,-1,-1,-1,1,-1,1,0,1,-1,1,-1,-1,-1,0,-1,1,1,-1,1,-1,0,-1,1,-1,-1,1,-1,0,1]


def test_is_cyclic_exceptions():
    with pytest.raises(TypeError):
        galois.is_cyclic(20.0)
    with pytest.raises(ValueError):
        galois.is_cyclic(-1)


def test_is_cyclic():
    assert galois.is_cyclic(2) == True
    assert galois.is_cyclic(4) == True
    assert galois.is_cyclic(2 * 3**3) == True
    assert galois.is_cyclic(5**7) == True
    assert galois.is_cyclic(2**3) == False
    assert galois.is_cyclic(2*5*7*9) == False

    assert all(galois.is_cyclic(n) == (galois.euler_phi(n) == galois.carmichael_lambda(n)) for n in range(1, 100))
