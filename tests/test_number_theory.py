"""
A pytest module to test number theoretic functions.
"""
import pytest
import numpy as np

import galois


###############################################################################
# Divisibility
###############################################################################

def test_gcd_exceptions():
    with pytest.raises(TypeError):
        galois.gcd(10.0, 12)
    with pytest.raises(TypeError):
        galois.gcd(10, 12.0)


def test_gcd():
    """
    Sage:
        lut = []
        for _ in range(20):
            a = randint(0, 1_000_000)
            b = randint(0, 1_000_000)
            d = gcd(a, b)
            lut.append((a, b, d))
        print(lut)
    """
    LUT = [(254106, 430252, 2), (314635, 399746, 1), (18443, 62366, 1), (75031, 123565, 1), (586316, 281104, 4), (561846, 710109, 3), (65252, 847116, 4), (292637, 586981, 1), (79548, 762423, 3), (442174, 400796, 2), (891398, 90780, 2), (674302, 388562, 2), (962410, 917298, 2), (724869, 914731, 1), (362739, 735930, 39), (864510, 126773, 1), (810438, 133433, 1), (879960, 156064, 8), (599758, 302600, 2), (92533, 164823, 1)]
    for item in LUT:
        a, b, gcd = item
        assert galois.gcd(a, b) == gcd


def test_gcd_large():
    """
    Sage:
        lut = []
        for _ in range(20):
            a = randint(int(1e20), int(1e30))
            b = randint(int(1e20), int(1e30))
            d = gcd(a, b)
            lut.append((a, b, d))
        print(lut)
    """
    LUT = [(691855548948162664689728218913, 907168486315882064430022598309, 1), (212536830066379787750218660382, 115644237309698418842262179332, 2), (128104041708079140086473196371, 456575320068818457300039152027, 1), (429697928803162570332843358007, 842592985684218465839315212541, 1), (985935821782060965424938706953, 631025035307189503208625768415, 1), (781749042559723199916327262446, 455469364646206848844383583377, 9), (235020995997038808972807257872, 606639150074182853723697663422, 2), (495824693334587789379546078720, 556961987960940820793021950516, 4), (679382359744051872619869588077, 7680774334047487592931240889, 1), (107180293655451487516500172835, 668095783612671563843111572983, 1), (765017818458541868841370449274, 673934390332391843867517413557, 1), (578816033678634693170141147110, 515999790897220737598002371431, 1), (832665785972135762090814622068, 702592745117434301716229791936, 4), (978019105162685159826674252060, 282528626902587450163404873282, 2), (819818115100591624317414531195, 868934633295166116073844126046, 3), (921403497407341529306393729596, 498904399456252058753366102789, 1), (748932687750458835056424160784, 91614733338795727134154553757, 1), (866887697079684500311810535184, 6343757760146422465416783529, 1), (917418913518625317497647558579, 671901598150143329770454858030, 1), (574399611963151413091010436547, 786857819066559909889396587799, 1)]
    for item in LUT:
        a, b, gcd = item
        assert galois.gcd(a, b) == gcd


def test_egcd_exceptions():
    with pytest.raises(TypeError):
        galois.egcd(10.0, 12)
    with pytest.raises(TypeError):
        galois.egcd(10, 12.0)


def test_egcd():
    """
    Sage:
        lut = []
        for _ in range(20):
            a = randint(0, 1_000_000)
            b = randint(0, 1_000_000)
            d, x, y = xgcd(a, b)
            lut.append((a, b, d, x, y))
        print(lut)
    """
    LUT = [(752887, 112306, 1, -35507, 238035), (541892, 146054, 2, -11902, 44159), (812144, 602653, 1, 39889, -53755), (493578, 807092, 34, 5177, -3166), (424306, 316541, 1, 149272, -200091), (318679, 24233, 1, -644, 8469), (636172, 251055, 1, -27122, 68727), (749617, 733482, 1, 15547, -15889), (892575, 219301, 1, 61620, -250799), (122715, 20818, 1, -5373, 31672), (206675, 824594, 1, -203995, 51129), (755837, 41303, 1, -6274, 114813), (969401, 270962, 1, 1475, -5277), (907153, 682248, 31, 10687, -14210), (515925, 604362, 3, 26071, -22256), (610278, 360755, 1, -155693, 263381), (44056, 67584, 8, -2005, 1307), (75562, 253783, 1, -54265, 16157), (767187, 8921, 1, 939, -80752), (531280, 259862, 2, 43018, -87949)]
    for item in LUT:
        a, b, gcd, x, y = item
        assert galois.egcd(a, b) == (gcd, x, y)


def test_egcd_large():
    """
    Sage:
        lut = []
        for _ in range(20):
            a = randint(int(1e20), int(1e30))
            b = randint(int(1e20), int(1e30))
            d, x, y = xgcd(a, b)
            lut.append((a, b, d, x, y))
        print(lut)
    """
    LUT = [(790663111625038805508041409322, 372279299809800965185997898344, 2, 63255117841841458223200459221, -134343994749616684999949366390), (248995100313840416788974734335, 79636305905560621097602457171, 1, -13600904539943305027999071540, 42525309929596867999918081631), (863059556454494845789772265401, 483167343659643829056671843783, 1, -45690600044214528230317344220, 81615012946896689736631925787), (483238230148230632095792372187, 236422445288333971228047912317, 1, -25481850756700440211871110453, 52083906185606500707988026936), (637358018648014300944279327782, 107063130170015742826473629408, 2, 4798862810868946428507722651, -28568132540511752347370580760), (840036378427231366942293469997, 528310583442190406152100885062, 29, 9006009249169153528116463443, -14319939124562388680634754591), (916799922874192490834121673132, 655310247485208363368441876131, 1, -246486204905537604221833904073, 344842056894662036766227658127), (96905201655969862011387887696, 211906443124524247787349963432, 8, -8333888098291857781196952302, 3811102177146567596131347225), (303774643665228679069611801280, 554808437545013799632720365079, 1, 95789797962612631285564925249, -52447853662095798619077579161), (582176259741262214128817046554, 375789985186097707729161890753, 1, 164738979723788020378629876614, -255214685941382061695749420635), (391198218908190133618262645153, 686386020329362629846506277085, 1, -251332546585359137103581819508, 143244241091438485933427470585), (932141029752813494925527837655, 434514711460832845343231093481, 3, -24059096234942333520874613717, 51612684560123821822781252598), (866978154143513357467130595803, 783206615117672379467943712717, 1, -162558345529106618841348119321, 179945536244320005135469109492), (453525805337317346105577812105, 293383579773048455197537198801, 1, 9023284484710065030199153625, -13948607368829267132674139424), (144467294795539928457086044517, 759481389006092576223871477828, 1, -171022400489049501951734705299, 32531598411418354302328331328), (803074097443437827149010543920, 678137060789616984206196874720, 560, -244932205646490479331262483, 290057454986093158108924986), (653603750845570688332003472149, 879495658877992853516649321403, 1, 326194506748217421729965802170, -242413877730614190273248181043), (879645597355699929978297952905, 631463874435084036186421339672, 1, -23046336033431936061558316455, 32104145379851811315023512708), (490790592725783257481664331646, 250631774826532826875198027136, 2, -8222601405004191075332330881, 16101611298499426609997038523), (968414246093869869635209557138, 345961677531545229039551062667, 1, -51628034689570984454430781280, 144516943749211141367189805923)]
    for item in LUT:
        a, b, gcd, x, y = item
        assert galois.egcd(a, b) == (gcd, x, y)


def test_lcm_exceptions():
    with pytest.raises(TypeError):
        galois.lcm(1.0, 2, 3)
    with pytest.raises(TypeError):
        galois.lcm(1, 2.0, 3)
    with pytest.raises(TypeError):
        galois.lcm(1, 2, 3.0)


def test_lcm():
    """
    Sage:
        lut = []
        for _ in range(20):
            ints = [randint(0, 1_000_000) for _ in range(randint(2, 5))]
            l = lcm(ints)
            lut.append((*ints, l))
        print(lut)
    """
    LUT = [(955042, 89712, 75959, 772640, 587221, 8388578080038511328893920), (695750, 839540, 440715, 468047306941500), (652668, 520107, 940363, 106404328903132596), (173622, 674775, 39051928350), (261048, 528350, 183428, 3162406731577800), (950087, 296689, 281880361943), (53323, 474916, 271106, 260830, 598655, 53601218887897424868298460), (730644, 738348, 195401, 8784407235485076), (880622, 927737, 109243, 89249959256942602), (127854, 785186, 435636, 1214809356383244), (616079, 79748, 340494, 304828, 143751, 30543595427270452752334956), (464755, 245545, 436455, 110493, 827356, 20236681984114628222998140), (98280, 865927, 414020, 1761723528397560), (106000, 964573, 670293, 68533932168234000), (418153, 38849, 16244825897), (967507, 937066, 791418, 568717, 408088, 41631327864590791165455647784), (365624, 638136, 188964, 277240, 182937370526308440), (954713, 90951, 86832102063), (829101, 956712, 577928, 451183, 422064, 11658095236418813877122064), (375453, 502615, 628619, 364603, 372479, 16110186134117427305766318285)]
    for item in LUT:
        ints = item[0:-1]
        lcm = item[-1]
        assert galois.lcm(*ints) == lcm


def test_euler_phi_exceptions():
    with pytest.raises(TypeError):
        galois.euler_phi(20.0)
    with pytest.raises(ValueError):
        galois.euler_phi(-1)


def test_euler_phi():
    # https://oeis.org/A000010
    N = list(range(1,70))
    PHI = [1,1,2,2,4,2,6,4,6,4,10,4,12,6,8,8,16,6,18,8,12,10,22,8,20,12,18,12,28,8,30,16,20,16,24,12,36,18,24,16,40,12,42,20,24,22,46,16,42,20,32,24,52,18,40,24,36,28,58,16,60,30,36,32,48,20,66,32,44]
    for n, phi in zip(N, PHI):
        assert galois.euler_phi(n) == phi


def test_totatives_exceptions():
    with pytest.raises(TypeError):
        galois.totatives(20.0)
    with pytest.raises(ValueError):
        galois.totatives(-1)


def test_totatives():
    # https://oeis.org/A000010
    N = list(range(1,70))
    PHI = [1,1,2,2,4,2,6,4,6,4,10,4,12,6,8,8,16,6,18,8,12,10,22,8,20,12,18,12,28,8,30,16,20,16,24,12,36,18,24,16,40,12,42,20,24,22,46,16,42,20,32,24,52,18,40,24,36,28,58,16,60,30,36,32,48,20,66,32,44]
    for n, phi in zip(N, PHI):
        assert len(galois.totatives(n)) == phi


def test_are_coprime_exceptions():
    with pytest.raises(TypeError):
        galois.are_coprime(3.0, 4, 5)
    with pytest.raises(TypeError):
        galois.are_coprime(3, 4.0, 5)
    with pytest.raises(TypeError):
        galois.are_coprime(3, 4, 5.0)
    with pytest.raises(ValueError):
        galois.are_coprime()


def test_are_coprime():
    assert galois.are_coprime(3, 4, 5) == True
    assert galois.are_coprime(3, 5, 9, 11) == False
    assert galois.are_coprime(2, 3, 7, 256) == False


###############################################################################
# Congruences
###############################################################################

def test_pow_exceptions():
    with pytest.raises(TypeError):
        galois.pow(1.0, 2, 3)
    with pytest.raises(TypeError):
        galois.pow(1, 2.0, 3)
    with pytest.raises(TypeError):
        galois.pow(1, 2, 3.0)


def test_pow():
    """
    Sage:
        lut = []
        for _ in range(20):
            base = randint(0, 1_000_000)
            exponent = randint(0, 1_000_000)
            modulus = randint(0, 1_000_000)
            result = pow(base, exponent, modulus)
            lut.append((base, exponent, modulus, result))
        print(lut)
    """
    LUT = [(323434, 327726, 742438, 162670), (841205, 251699, 237735, 93650), (271693, 58834, 905805, 872344), (834391, 494506, 577332, 217513), (424309, 133637, 715490, 51069), (213728, 778789, 346929, 71384), (134584, 118281, 161814, 3850), (387825, 382708, 743837, 72495), (617165, 759526, 997656, 10033), (372370, 792424, 309363, 216235), (98499, 489843, 965820, 24279), (899638, 732171, 888788, 233020), (939745, 576108, 981125, 383250), (623885, 605949, 128282, 105517), (447582, 848997, 724778, 200148), (360331, 355674, 472506, 469429), (85386, 299738, 228229, 40864), (95024, 360241, 488753, 11851), (471190, 788675, 314450, 291400), (49670, 61752, 755248, 57552)]
    for item in LUT:
        base, exponent, modulus = item[0:3]
        result = item[-1]
        assert galois.pow(base, exponent, modulus) == result


def test_crt_exceptions():
    with pytest.raises(TypeError):
        galois.crt(np.array([0, 3, 4]), [3, 4, 5])
    with pytest.raises(TypeError):
        galois.crt([0, 3, 4], np.array([3, 4, 5]))
    with pytest.raises(TypeError):
        galois.crt([0, 3.0, 4], [3, 4, 5])
    with pytest.raises(TypeError):
        galois.crt([0, 3, 4], [3, 4.0, 5])
    with pytest.raises(ValueError):
        galois.crt([0, 3, 4], [3, 4, 5, 7])
    with pytest.raises(ValueError):
        galois.crt([0, 3, 4], [3, 4, 6])


def test_crt():
    """
    Sage:
        lut = []
        for _ in range(20):
            N = randint(2, 6)
            a = [randint(0, 1_000) for _ in range(N)]
            m = []
            while len(m) < N:
                mi = next_prime(randint(0, 1_000))
                if mi not in m:
                    m.append(mi)
            x = crt(a, m)
            lut.append((a, m, x))
        print(lut)
    """
    LUT = [([975, 426, 300, 372, 596, 856], [457, 331, 521, 701, 71, 907], 1139408681764819), ([85, 653, 323, 655], [331, 479, 601, 191], 10711106463), ([589, 538, 501], [347, 541, 947], 155375738), ([788, 821, 414], [673, 331, 149], 20497003), ([269, 703, 436, 641, 616], [929, 293, 541, 467, 853], 39214084831996), ([270, 190], [173, 277], 15148), ([518, 809, 857, 118], [349, 821, 937, 157], 38154123633), ([711, 735, 1000, 426, 522], [149, 281, 293, 97, 37], 43994914384), ([104, 722, 168, 478], [193, 977, 211, 607], 23841886088), ([64, 160, 626, 702, 883], [877, 907, 251, 307, 839], 6612150797141), ([428, 570, 418, 346, 436], [467, 541, 373, 907, 179], 14825927170624), ([904, 14, 690, 585], [577, 907, 223, 967], 1713097171), ([238, 213, 368, 909, 455, 995], [137, 359, 947, 463, 937, 113], 1425637682359276), ([624, 95, 467, 472, 447, 849], [439, 79, 757, 269, 449, 293], 358511203165372), ([692, 245, 191, 101, 992, 267], [197, 367, 419, 139, 233, 593], 528226613934229), ([767, 794, 410], [331, 727, 359], 35029835), ([938, 992], [547, 17], 1485), ([337, 286, 308, 602, 386, 855], [67, 241, 167, 113, 211, 659], 36856037086592), ([681, 418], [997, 739], 630785), ([897, 343, 555, 245], [701, 89, 827, 379], 10082200693)]
    for item in LUT:
        a, m, x = item
        assert galois.crt(a, m) == x


def test_carmichael_lambda_exceptions():
    with pytest.raises(TypeError):
        galois.carmichael_lambda(20.0)
    with pytest.raises(ValueError):
        galois.carmichael_lambda(-1)


def test_carmichael_lambda():
    # https://oeis.org/A002322
    N = list(range(1,82))
    LAMBDA = [1,1,2,2,4,2,6,2,6,4,10,2,12,6,4,4,16,6,18,4,6,10,22,2,20,12,18,6,28,4,30,8,10,16,12,6,36,18,12,4,40,6,42,10,12,22,46,4,42,20,16,12,52,18,20,6,18,28,58,4,60,30,6,16,12,10,66,16,22,12,70,6,72,36,20,18,30,12,78,4,54]
    for n, lambda_ in zip(N, LAMBDA):
        assert galois.carmichael_lambda(n) == lambda_


def test_legendre_symbol_exceptions():
    with pytest.raises(TypeError):
        galois.legendre_symbol(3.0, 7)
    with pytest.raises(TypeError):
        galois.legendre_symbol(3, 7.0)
    with pytest.raises(ValueError):
        galois.legendre_symbol(3, 4)
    with pytest.raises(ValueError):
        galois.legendre_symbol(3, 2)


def test_legendre_symbol():
    # https://oeis.org/A102283
    assert [galois.legendre_symbol(n, 3) for n in range(0, 105)] == [0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1]
    # https://oeis.org/A080891
    assert [galois.legendre_symbol(n, 5) for n in range(0, 101)] == [0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0]
    # https://oeis.org/A175629
    assert [galois.legendre_symbol(n, 7) for n in range(0, 87)] == [0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1]
    # https://oeis.org/A011582
    assert [galois.legendre_symbol(n, 11) for n in range(0, 81)] == [0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1]
    # https://oeis.org/A011583
    assert [galois.legendre_symbol(n, 13) for n in range(0, 81)] == [0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1]
    # ...
    # https://oeis.org/A165573
    assert [galois.legendre_symbol(n, 257) for n in range(0, 82)] == [0,1,1,-1,1,-1,-1,-1,1,1,-1,1,-1,1,-1,1,1,1,1,-1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,1,-1,1,-1,1,-1,-1,1,1,-1,1,-1,-1,-1,-1,1,1,1,1,1,1,-1,1,-1,-1,1,1,-1,1,-1,1,1,-1,-1,-1,-1,-1,1,-1,1]
    # https://oeis.org/A165574
    assert [galois.legendre_symbol(n, 263) for n in range(0, 84)] == [0,1,1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,-1,1,-1,-1,-1,1,1,-1,1,-1,1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,1,1,1,-1,1,-1,1,1,-1,-1,1,-1,-1,1,-1,1]


def test_jacobi_symbol_exceptions():
    with pytest.raises(TypeError):
        galois.jacobi_symbol(3.0, 7)
    with pytest.raises(TypeError):
        galois.jacobi_symbol(3, 7.0)
    with pytest.raises(ValueError):
        galois.jacobi_symbol(3, 4)
    with pytest.raises(ValueError):
        galois.jacobi_symbol(3, 1)


def test_jacobi_symbol():
    # https://oeis.org/A102283
    assert [galois.jacobi_symbol(n, 3) for n in range(0, 105)] == [0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1]
    # https://oeis.org/A080891
    assert [galois.jacobi_symbol(n, 5) for n in range(0, 101)] == [0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0]
    # https://oeis.org/A175629
    assert [galois.jacobi_symbol(n, 7) for n in range(0, 87)] == [0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1]
    # https://oeis.org/A011582
    assert [galois.jacobi_symbol(n, 11) for n in range(0, 81)] == [0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1]
    # https://oeis.org/A011583
    assert [galois.jacobi_symbol(n, 13) for n in range(0, 81)] == [0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1]

    # https://oeis.org/A102283
    assert [galois.jacobi_symbol(n, 15) for n in range(0, 76)] == [0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0]
    # https://oeis.org/A322829
    assert [galois.jacobi_symbol(n, 21) for n in range(0, 85)] == [0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0]


def test_kronecker_symbol_exceptions():
    with pytest.raises(TypeError):
        galois.kronecker_symbol(3.0, 7)
    with pytest.raises(TypeError):
        galois.kronecker_symbol(3, 7.0)


def test_kronecker_symbol():
    # https://oeis.org/A102283
    assert [galois.kronecker_symbol(n, 3) for n in range(0, 105)] == [0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1,0,1,-1]
    # https://oeis.org/A080891
    assert [galois.kronecker_symbol(n, 5) for n in range(0, 101)] == [0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0,1,-1,-1,1,0]
    # https://oeis.org/A175629
    assert [galois.kronecker_symbol(n, 7) for n in range(0, 87)] == [0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1,-1,1,-1,-1,0,1,1]
    # https://oeis.org/A011582
    assert [galois.kronecker_symbol(n, 11) for n in range(0, 81)] == [0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1,1,1,-1,-1,-1,1,-1,0,1,-1,1]
    # https://oeis.org/A011583
    assert [galois.kronecker_symbol(n, 13) for n in range(0, 81)] == [0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,0,1,-1]

    # https://oeis.org/A102283
    assert [galois.kronecker_symbol(n, 15) for n in range(0, 76)] == [0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0,1,1,0,1,0,0,-1,1,0,0,-1,0,-1,-1,0]
    # https://oeis.org/A322829
    assert [galois.kronecker_symbol(n, 21) for n in range(0, 85)] == [0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0,1,-1,0,1,1,0,0,-1,0,-1,-1,0,-1,0,0,1,1,0,-1,1,0]

    # https://oeis.org/A289741
    assert [galois.kronecker_symbol(-20, n) for n in range(0, 81)] == [0,1,0,1,0,0,0,1,0,1,0,-1,0,-1,0,0,0,-1,0,-1,0,1,0,1,0,0,0,1,0,1,0,-1,0,-1,0,0,0,-1,0,-1,0,1,0,1,0,0,0,1,0,1,0,-1,0,-1,0,0,0,-1,0,-1,0,1,0,1,0,0,0,1,0,1,0,-1,0,-1,0,0,0,-1,0,-1,0]
    # https://oeis.org/A226162
    assert [galois.kronecker_symbol(-5, n) for n in range(0, 90)] == [0,1,-1,1,1,0,-1,1,-1,1,0,-1,1,-1,-1,0,1,-1,-1,-1,0,1,1,1,-1,0,1,1,1,1,0,-1,-1,-1,1,0,1,-1,1,-1,0,1,-1,1,-1,0,-1,1,1,1,0,-1,-1,-1,-1,0,-1,-1,-1,-1,0,1,1,1,1,0,1,1,-1,1,0,-1,-1,-1,1,0,-1,-1,1,-1,0,1,-1,1,1,0,-1,1,1,1]
    # https://oeis.org/A034947
    assert [galois.kronecker_symbol(-1, n) for n in range(1, 82)] == [1,1,-1,1,1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,1,1,-1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,1]
    # https://oeis.org/A091337
    assert [galois.kronecker_symbol(2, n) for n in range(1, 106)] == [1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1]
    # https://oeis.org/A091338
    assert [galois.kronecker_symbol(3, n) for n in range(1, 103)] == [1,-1,0,1,-1,0,-1,-1,0,1,1,0,1,1,0,1,-1,0,-1,-1,0,-1,1,0,1,-1,0,-1,-1,0,-1,-1,0,1,1,0,1,1,0,1,-1,0,-1,1,0,-1,1,0,1,-1,0,1,-1,0,-1,1,0,1,1,0,1,1,0,1,-1,0,-1,-1,0,-1,1,0,1,-1,0,-1,-1,0,-1,-1,0,1,1,0,1,1,0,-1,-1,0,-1,1,0,-1,1,0,1,-1,0,1,-1,0]
    # https://oeis.org/A322796
    assert [galois.kronecker_symbol(6, n) for n in range(0, 85)] == [0,1,0,0,0,1,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,1,0,0,0,1,0,1,0,0,0,1,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,1,0,0,0,1,0,1,0,0,0,1,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,1,0,0,0,1,0,1,0,0,0,1,0,-1,0,0,0,-1,0]
    # https://oeis.org/A089509
    assert [galois.kronecker_symbol(7, n) for n in range(1, 107)] == [1,1,1,1,-1,1,0,1,1,-1,-1,1,-1,0,-1,1,-1,1,1,-1,0,-1,-1,1,1,-1,1,0,1,-1,1,1,-1,-1,0,1,1,1,-1,-1,-1,0,-1,-1,-1,-1,1,1,0,1,-1,-1,1,1,1,0,1,1,1,-1,-1,1,0,1,1,-1,-1,-1,-1,0,-1,1,-1,1,1,1,0,-1,-1,-1,1,-1,1,0,1,-1,1,-1,-1,-1,0,-1,1,1,-1,1,-1,0,-1,1,-1,-1,1,-1,0,1]


def test_is_cyclic_exceptions():
    with pytest.raises(TypeError):
        galois.is_cyclic(20.0)
    with pytest.raises(ValueError):
        galois.is_cyclic(-1)


def test_is_cyclic():
    assert galois.is_cyclic(2) == True
    assert galois.is_cyclic(4) == True
    assert galois.is_cyclic(2 * 3**3) == True
    assert galois.is_cyclic(5**7) == True
    assert galois.is_cyclic(2**3) == False
    assert galois.is_cyclic(2*5*7*9) == False

    assert all(galois.is_cyclic(n) == (galois.euler_phi(n) == galois.carmichael_lambda(n)) for n in range(1, 100))


###############################################################################
# Integer arithmetic
###############################################################################

def test_isqrt_exceptions():
    with pytest.raises(TypeError):
        galois.isqrt(3.0)
    with pytest.raises(ValueError):
        galois.isqrt(-3)


def test_isqrt():
    """
    Sage:
        N = 20
        n = [randint(0, 1_000_000) for _ in range(N)]
        lut = [(ni, isqrt(ni)) for ni in n]
        print(lut)
    """
    LUT = [(681987, 825), (533875, 730), (743346, 862), (966298, 983), (983657, 991), (208532, 456), (658520, 811), (735666, 857), (155024, 393), (470463, 685), (71083, 266), (706821, 840), (628141, 792), (45582, 213), (460761, 678), (511644, 715), (719018, 847), (596428, 772), (821551, 906), (27234, 165)]
    for item in LUT:
        n, x = item
        assert galois.isqrt(n) == x


def test_iroot_exceptions():
    with pytest.raises(TypeError):
        galois.iroot(9.0, 3)
    with pytest.raises(TypeError):
        galois.iroot(9, 3.0)
    with pytest.raises(ValueError):
        galois.iroot(-9, 3)
    with pytest.raises(ValueError):
        galois.iroot(9, 1)


def test_iroot():
    """
    Sage:
        N = 20
        lut = []
        for _ in range(N):
            n = Integer(randint(0, 1_000_000))
            k = randint(2, 6)
            x = n.nth_root(k, truncate_mode=True)[0]
            lut.append((n, k, x))
        print(lut)
    """
    LUT = [(779174, 4, 29), (867742, 4, 30), (709111, 2, 842), (616365, 6, 9), (615576, 2, 784), (259784, 2, 509), (862570, 2, 928), (553097, 2, 743), (929919, 4, 31), (841722, 6, 9), (658636, 3, 87), (326492, 5, 12), (195217, 4, 21), (969412, 3, 98), (95064, 3, 45), (550943, 3, 81), (171374, 3, 55), (881656, 3, 95), (915960, 6, 9), (810062, 2, 900)]
    for item in LUT:
        n, k, x = item
        assert galois.iroot(n, k) == x

    assert galois.iroot(0, 2) == 0


def test_ilog_exceptions():
    with pytest.raises(TypeError):
        galois.ilog(9.0, 2)
    with pytest.raises(TypeError):
        galois.ilog(9, 2.0)
    with pytest.raises(ValueError):
        galois.ilog(-9, 2)
    with pytest.raises(ValueError):
        galois.ilog(9, 1)


# TODO: Find a way to generate test vectors with Sage
def test_ilog():
    p = galois.mersenne_primes(2000)[-1]
    exponent = galois.ilog(p, 17)
    assert isinstance(exponent, int)
    assert 17**exponent <= p and not 17**(exponent + 1) <= p

    p = galois.mersenne_primes(2000)[-1] - 1
    exponent = galois.ilog(p, 17)
    assert isinstance(exponent, int)
    assert 17**exponent <= p and not 17**(exponent + 1) <= p

    p = galois.mersenne_primes(2000)[-1] + 1
    exponent = galois.ilog(p, 17)
    assert isinstance(exponent, int)
    assert 17**exponent <= p and not 17**(exponent + 1) <= p
