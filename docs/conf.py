# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html


# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import os
import sys
sys.path.insert(0, os.path.abspath(".."))

# Need to build docs with Python 3.8 or higher for proper typing annotations, including from __future__ import annotations
assert sys.version_info.major == 3 and sys.version_info.minor >= 8

# Assign a build variable to the builtin module that inerts the @set_module decorator. This is done because set_module
# confuses Sphinx when parsing overloaded functions. When not building the documentation, the @set_module("galois")
# decorator works as intended.
import builtins
setattr(builtins, "__sphinx_build__", True)

from galois import __version__

import numpy


# -- Project information -----------------------------------------------------

project = "galois"
copyright = "2020-2022, Matt Hostetter"
author = "Matt Hostetter"
version = __version__


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named "sphinx.ext.*") or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.napoleon",
    "sphinx.ext.mathjax",
    "sphinx.ext.intersphinx",
    "sphinx.ext.autosectionlabel",
    "sphinx_immaterial",
    "recommonmark",
    "sphinx_design",
    "sphinxcontrib.details.directive",
    "IPython.sphinxext.ipython_console_highlighting",
    "IPython.sphinxext.ipython_directive"
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = [".rst", ".md", ".ipynb"]

# Tell sphinx that ReadTheDocs will create an index.rst file as the main file,
# not the default of contents.rst.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store", ".ipynb_checkpoints"]


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_immaterial"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

html_css_files = [
    "extra.css",
]

# Sets the default role of `content` to :samp:`content`, which mimics inline literals ``content```
default_role = "samp"

html_title = "galois"
html_favicon = "../logo/galois-favicon-color.png"
html_logo = "../logo/galois-favicon-white.png"

# Sphinx Immaterial theme options
html_theme_options = {
    "icon": {
        "repo": "fontawesome/brands/github",
    },
    "site_url": "https://galois.readthedocs.io/",
    "repo_url": "https://github.com/mhostetter/galois",
    "repo_name": "mhostetter/galois",
    "repo_type": "github",
    "social": [
        {
            "icon": "fontawesome/brands/github",
            "link": "https://github.com/mhostetter/galois"
        },
        {
            "icon": "fontawesome/brands/python",
            "link": "https://pypi.org/project/galois/"
        },
        {
            "icon": "fontawesome/brands/twitter",
            "link": "https://twitter.com/galois_py"
        },
    ],
    "edit_uri": "",
    "globaltoc_collapse": False,
    "features": [
        # "navigation.expand",
        "navigation.tabs",
        # "toc.integrate",
        # "navigation.sections",
        # "navigation.instant",
        # "header.autohide",
        "navigation.top",
        "navigation.tracking",
    ],
    "palette": [
        {
            "media": "(prefers-color-scheme: light)",
            "scheme": "default",
            "accent": "deep-orange",
            "toggle": {
                "icon": "material/weather-night",
                "name": "Switch to dark mode",
            },
        },
        {
            "media": "(prefers-color-scheme: dark)",
            "scheme": "slate",
            "accent": "deep-orange",
            "toggle": {
                "icon": "material/weather-sunny",
                "name": "Switch to light mode",
            },
        },
    ],
    "analytics": {
        "provider": "google",
        "property": "G-4FW9NCNFZH"
    },
    # "font": {
    #     "code": "Ubuntu Mono"
    # },
    # "version_dropdown": True,
    # "version_info": [
    #     {
    #         "version": "https://sphinx-immaterial.rtfd.io",
    #         "title": "ReadTheDocs",
    #         "aliases": []
    #     },
    #     {
    #         "version": "https://jbms.github.io/sphinx-immaterial",
    #         "title": "Github Pages",
    #         "aliases": []
    #     },
    # ],
}

html_last_updated_fmt = ""
html_use_index = True
html_domain_indices = True

# -- Extension configuration -------------------------------------------------

# Create hyperlinks to other documentation
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
}

autodoc_default_options = {
    "imported-members": True,
    "members": True,
    "special-members": True,
    "member-order": "groupwise",
}
autodoc_typehints = "signature"
autodoc_typehints_description_target = "documented"
autodoc_typehints_format = "short"

autodoc_type_aliases = {
    "ElementLike": "~typing.ElementLike",
    "IterableLike": "~typing.IterableLike",
    "ArrayLike": "~typing.ArrayLike",
    "ShapeLike": "~typing.ShapeLike",
    "DTypeLike": "~typing.DTypeLike",
    "PolyLike": "~typing.PolyLike",
}

autosummary_generate = True
autosummary_generate_overwrite = True
autosummary_imported_members = True

ipython_execlines = ["import math", "import numpy as np", "import galois"]


# -- Monkey-patching -----------------------------------------------------

SPECIAL_MEMBERS = [
    "__repr__", "__str__", "__int__",
    "__call__", "__len__", "__eq__",
]

def skip_member(app, what, name, obj, skip, options):
    """
    Instruct autosummary to skip members that are inherited from np.ndarray
    """
    if skip:
        # Continue skipping things Sphinx already wants to skip
        return skip

    if hasattr(obj, "__objclass__"):
        # This is a NumPy method, don't include docs
        return True
    elif hasattr(obj, "__qualname__") and getattr(obj, "__qualname__").split(".")[0] == "FieldArray" and hasattr(numpy.ndarray, name):
        if name in ["__repr__", "__str__"]:
            # Specially allow these methods to be displayed
            return False
        else:
            # This is a NumPy method that was overridden in one of our ndarray subclasses. Also don't include
            # these docs.
            return True

    if name in SPECIAL_MEMBERS:
        # Don"t skip members in "special-members"
        return False

    if name[0] == "_":
        # For some reason we need to tell sphinx to hide private members
        return True

    return skip


def process_signature(app, what, name, obj, options, signature, return_annotation):
    """
    Monkey-patch the autodoc's processing of signatures.
    """
    signature = modify_type_hints(signature)
    return_annotation = modify_type_hints(return_annotation)

    return signature, return_annotation


def modify_type_hints(signature, do_print=False):
    """
    Modify the autodoc type hint signatures to be more readable. Union[x, y] is replaced with x | y.
    Optional[x] is replaced with x | None. Also, short names are used (and properly linked).
    """
    if signature:
        # Ensure types from the typing module are properly hyperlinked
        for type_name in ["Tuple", "List", "Sequence", "Dict", "Optional", "Union", "Iterator", "Type", "Literal"]:
            signature = signature.replace(f"{type_name}[", f"~typing.{type_name}[")
            signature = signature.replace("~typing.~typing", "~typing")

        # Convert Optional[a] to a | None
        idx = 0
        while True:
            idx = signature.find("~typing.Optional[", idx)
            if idx == -1:
                break
            end_idx = signature.find("] = None", idx)
            pre = signature[:idx]
            post = signature[end_idx + 1:]
            optional_str = signature[idx:end_idx + 1]
            optional_str = optional_str[len("~typing.Optional[") : -len("]")]
            optional_str += " | None"
            signature = pre + optional_str + post
            idx = len(pre) + len(optional_str)

        # Convert Union[a, b] to a | b
        idx = 0
        while True:
            idx = signature.find("~typing.Union[", idx)
            if idx == -1:
                break
            idx_2 = idx
            while True:
                end_idx = signature.find("]", idx_2)
                if signature[idx:end_idx + 1].count("[") == signature[idx:end_idx + 1].count("]"):
                    break
                else:
                    idx_2 = end_idx + 1
            pre = signature[:idx]
            post = signature[end_idx + 1:]
            union_str = signature[idx:end_idx + 1]
            union_str = union_str[len("~typing.Union[") : -len("]")]
            union_str = union_str.replace(", ", " | ")
            signature = pre + union_str + post
            idx = len(pre) + len(union_str)

        # Ensure types from the galois.typing subpackage are properly hyperlinked
        for type_name in autodoc_type_aliases.keys():
            signature = signature.replace(type_name, autodoc_type_aliases[type_name])
        signature = signature.replace("~typing.~typing", "~typing")

        # Ensure forward references are properly linked by removing '' and adding ~
        for type_name in ["Array", "FieldArray", "Poly"]:
            signature = signature.replace(f"'{type_name}'", f"~{type_name}")

        # Sometimes fully qualified names are in the signature. Convert them to short names. For example, ~galois._fields._gf2.GF2
        # is used instead of ~galois.GF2.
        idx = 0
        while True:
            idx = signature.find("~galois._", idx)
            if idx == -1:
                break
            end_idx = signature.find(" ", idx)
            if end_idx == -1:
                end_idx = len(signature)
            pre = signature[:idx]
            post = signature[end_idx + 1:]
            fullref_str = signature[idx:end_idx + 1]
            fullref_str = "~galois." + fullref_str.split(".")[-1]
            signature = pre + fullref_str + post
            idx = len(pre) + len(fullref_str)

        # Ensure NumPy references link properly
        signature = signature.replace("np.ndarray", "~numpy.ndarray")
        signature = signature.replace("np.random", "~numpy.random")

    return signature


def setup(app):
    app.connect("autodoc-skip-member", skip_member)
    app.connect("autodoc-process-signature", process_signature)
